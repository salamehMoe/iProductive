{"version":3,"sources":["template.js","app/controllers/tasks/tasks_sections.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ADtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/exsalameh/Desktop/iProductive-2/Resources/iphone/alloy/controllers/tasks/tasks_sections.js","sourceRoot":"/Users/exsalameh/Desktop/iProductive-2","sourcesContent":["var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n\n\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\t\n\trequire('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = 'tasks/tasks_sections';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar __parentSymbol = __processArg(arguments[0], '__parentSymbol');\n\t\tvar $model = __processArg(arguments[0], '$model');\n\t\tvar __itemTemplate = __processArg(arguments[0], '__itemTemplate');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\t\n\n\t// Generated UI code\n\t$.__views[\"headerView\"] = Ti.UI.createView(\n{backgroundColor:\"#efefef\",height:40,id:\"headerView\",}\n);\n$.__views[\"titleLbl\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,left:10,id:\"titleLbl\",}\n);\n$.__views[\"headerView\"].add($.__views[\"titleLbl\"]);\n$.__views[\"mySec\"] = Ti.UI.createListSection(\n{headerView:$.__views[\"headerView\"],id:\"mySec\",}\n);\n$.__views[\"mySec\"] && $.addTopLevelView($.__views[\"mySec\"]);\nexports.destroy = function () {};\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;\n","var args = arguments[0] || {},filterByCompletedQuery;\n\n$.titleLbl.setText(args.SectionDesc);\n\nvar taskCollaction = Alloy.createCollection('tasks');\n\ntaskCollaction.on('fetch', function () {\n  var rows = [];\n\n  taskCollaction.each(function (model) {\n\n    // var height = 75;\n\n    if (Alloy.isHandheld && model.get('QuestionDesc').length > 50) {\n      // height = model.get('QuestionDesc').length * 1.6;\n    }\n\n    rows.push({\n      properties: _.extend(model.toJSON(), {\n        TaskQuestionID: model.get('tTaskQuestionID'),\n        //accessoryType : model.get('CompletedDate') == null ? Ti.UI.LIST_ACCESSORY_TYPE_NONE : Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK,\n        searchableText: model.get('QuestionDesc')\n        //height : height\n      }),\n      status: {\n        image: \"/images/noDone.png\" },\n\n      taskTitle: {\n        text: model.get('QuestionDesc') },\n\n      //PriorityCode\n      taskDesc: {\n        //text : \"from:\" + model.get('timeFrom') + \" to:\" + model.get('timeTo')\n      },\n      doneMark: {\n        visible: model.get('CompletedDate') == null ? false : true },\n\n      priorityIcon: {\n        image: model.get('PriorityCode') == \"High\" ? \"/images/redIcon.png\" : \"\" },\n\n      completedId: model.get('id'),\n      CompletedDate: model.get('CompletedDate'),\n      taskRecord: model.get('taskRecord'),\n      tcTaskQuestionID: model.get('tcTaskQuestionID') });\n\n  });\n  Ti.API.error(\"this>>>\" + rows.length);\n\n  if (rows.length > 0) {\n    $.mySec.setItems(rows);\n  } else {\n    $.mySec.headerView.setHeight(0);\n  }\n\n});\n\nvar tmpModel = Alloy.createModel('tasks_completed', {\n  TaskQuestionID: 0 });\n\ntmpModel.save();\ntmpModel.destroy();\n\nfilterByCompletedQuery = args.filterByCompleted ? \"tc.CompletedDate is null AND \" : ''; //\"tc.CompletedDate IS NULL AND \";\n//filterByCompletedQuery = '';\ntry {\n  taskCollaction.fetch({\n    query: \"SELECT t.*, tc.*, t.TaskQuestionID tTaskQuestionID, tc.TaskQuestionID tcTaskQuestionID \" +\n    \"FROM tasks t \" +\n    \"LEFT JOIN tasks_completed tc ON CASE WHEN TaskID = 1 THEN t.TaskQuestionID = tc.TaskQuestionID AND date(tc.CompletedDate) = date() \" +\n    \"\tWHEN TaskID = 2 THEN  t.TaskQuestionID = tc.TaskQuestionID AND strftime('%Y-w%W', tc.CompletedDate) = strftime('%Y-w%W', date()) \" +\n    \"\tWHEN TaskID = 3 THEN t.TaskQuestionID = tc.TaskQuestionID AND strftime('%Y-m%m', tc.CompletedDate) = strftime('%Y-m%m', date()) \" +\n    \"\tWHEN TaskID = 4 THEN t.TaskQuestionID = tc.TaskQuestionID AND ((((cast(strftime('%Y-m%m', tc.CompletedDate) as integer) + 2) / 3) > 2) + 1) = 2 \" +\n    \"\tWHEN TaskID = 5 THEN t.TaskQuestionID = tc.TaskQuestionID AND strftime('%Y-m%m', tc.CompletedDate) = strftime('%Y-m%m', date()) \" +\n    \"\tEND = 1 \" +\n    \"WHERE \" + filterByCompletedQuery + \" t.SectionID=\" + args.SectionID + \" AND t.TaskID=\" + args.TaskID });\n\n} catch (e) {\n  //Ti.API.Info('error -> '+JSON.stringify(e));\n}"]}