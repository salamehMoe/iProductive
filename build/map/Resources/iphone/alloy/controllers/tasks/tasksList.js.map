{"version":3,"sources":["template.js","app/controllers/tasks/tasksList.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ADjRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/exsalameh/Desktop/iProductive-2/Resources/iphone/alloy/controllers/tasks/tasksList.js","sourceRoot":"/Users/exsalameh/Desktop/iProductive-2","sourcesContent":["var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n\n\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\t\n\trequire('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = 'tasks/tasksList';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar __parentSymbol = __processArg(arguments[0], '__parentSymbol');\n\t\tvar $model = __processArg(arguments[0], '$model');\n\t\tvar __itemTemplate = __processArg(arguments[0], '__itemTemplate');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\t\n\n\t// Generated UI code\n\t$.__views[\"tasks_list\"] = (require(\"xp.ui\").createWindow || Ti.UI.createWindow)(\n{backgroundColor:\"#ffffff\",translucent:true,tintColor:Alloy.CFG.tintColor,navTintColor:\"#ffffff\",barColor:Alloy.CFG.borderColor,includeOpaqueBars:true,autoAdjustScrollViewInsets:false,statusBarStyle:Ti.UI.iOS.StatusBar.LIGHT_CONTENT,extendEdges:[Ti.UI.EXTEND_EDGE_TOP,Ti.UI.EXTEND_EDGE_BOTTOM,],id:\"tasks_list\",title:\"Tasks\",}\n);\n$.__views[\"tasks_list\"] && $.addTopLevelView($.__views[\"tasks_list\"]);\n$.__views[\"__alloyId548\"] = Alloy.createController('centerNavBtns',{id:\"__alloyId548\",__parentSymbol:$.__views[\"tasks_list\"],});\n$.__views[\"__alloyId548\"].setParent($.__views[\"tasks_list\"]);\n$.__views[\"completedTasks\"] = Ti.UI.createButton(\n{title:\"Hide completed\",bottom:1,right:5,width:\"95%\",height:45,borderRadius:3,color:\"white\",backgroundColor:Alloy.CFG.borderColor,zIndex:1,id:\"completedTasks\",anchorPoint:\"center\",layout:\"absolute\",}\n);\n$.__views[\"tasks_list\"].add($.__views[\"completedTasks\"]);\nshowHideCompleted?$.addListener($.__views[\"completedTasks\"],'click',showHideCompleted):__defers['$.__views[\"completedTasks\"]!click!showHideCompleted']=true;if ((OS_IOS)) {\n$.__views[\"__alloyId549\"] = Ti.UI.createSearchBar(\n{hintText:\"Search ...\",barColor:\"#115EAC\",tintColor:\"#ffffff\",keyboardType:Titanium.UI.RETURNKEY_SEARCH,returnKeyType:Titanium.UI.RETURNKEY_SEARCH,id:\"__alloyId549\",}\n);\n}\nvar __alloyId550={};var __alloyId553=[];var __alloyId554={type:'Ti.UI.View',childTemplates: (function() {var __alloyId555=[];var __alloyId557={type:'Ti.UI.ImageView',bindId:'priorityIcon',properties:{width:15,height:15,right:10,top:0,bindId:\"priorityIcon\",},};__alloyId555.push(__alloyId557);var __alloyId559={type:'Ti.UI.Label',bindId:'taskTitle',properties:(function (){\nvar o = {};\nAlloy.deepExtend(true, o, {textAlign:Ti.UI.TEXT_ALIGNMENT_LEFT,height:15,width:\"85%\",left:35,top:0,color:\"black\",font:{fontSize:20,},});\nif (Alloy.isHandheld) Alloy.deepExtend(true, o, {font:{fontSize:14,},});\nAlloy.deepExtend(true, o, {bindId:\"taskTitle\",height:\"auto\",});\nreturn o;\n})(),};__alloyId555.push(__alloyId559);var __alloyId561={type:'Ti.UI.ImageView',bindId:'doneMark',properties:(function (){\nvar o = {};\nAlloy.deepExtend(true, o, {image:\"/images/Completed.png\",width:15,height:15,left:4,top:2,visible:false,});\nif (Alloy.isHandheld) Alloy.deepExtend(true, o, {width:15,height:15,left:4,});\nAlloy.deepExtend(true, o, {bindId:\"doneMark\",});\nreturn o;\n})(),};__alloyId555.push(__alloyId561);var __alloyId563={type:'Ti.UI.ImageView',bindId:'notdoneMark',properties:{image:\"/images/Notcompleted.png\",width:15,height:15,left:4,top:2,visible:true,bindId:\"notdoneMark\",},};__alloyId555.push(__alloyId563);return __alloyId555;})(),properties:{height:\"auto\",},events:{swipe:swipeOnTask,click:swipeOnTask,},};__alloyId553.push(__alloyId554);var __alloyId552 = {properties:{name:\"elementTemplate\",backgroundColor:\"#fefbf7\",height:\"auto\",},childTemplates:__alloyId553,};__alloyId550[\"elementTemplate\"]=__alloyId552;$.__views[\"list\"] = Ti.UI.createListView(\n{defaultItemTemplate:\"elementTemplate\",top:62,separatorColor:\"transparent\",bottom:50,templates:__alloyId550,searchView:$.__views[\"__alloyId549\"],id:\"list\",width:\"auto\",}\n);\n$.__views[\"tasks_list\"].add($.__views[\"list\"]);\nexports.destroy = function () {};\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t__defers['$.__views[\"completedTasks\"]!click!showHideCompleted'] && $.addListener($.__views[\"completedTasks\"],'click',showHideCompleted);\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;\n","// Get section ID\n// \"1\"  \"Before The Opening\" Notification at 9\n// \"2\"  \"After the store opening\" Notifcation at 11\n// \"3\"  \"Throughout the day\" Notification at 16\n// \"5\"  \"Re-opening\" Notification at 17\n// \"6\"  \"Before leaving\" Notification at 18:30\n\n// Get task ID\n// 2   Weekly Notifiaction on day of the week 5\n// 3   Monthly Notification on day of the month 23\n// 4   Semester notification I don't care do this one later\n// 5   YEARLY notification on 01/11/\n\n//Titanium.Media.vibrate();\n//Add this so Titanium will add the permissions and links needed to play sounds\n//var sound = Titanium.Media.createSound();\nvar alarmManager;\n\nif (!OS_IOS) {\n  var alarmModule = require('bencoding.alarmmanager');\n  alarmManager = alarmModule.createAlarmManager();\n}\ncheckIncompleteTasks();\n\nfunction checkIncompleteTasks() {\n  var tasksModel = Alloy.createModel('tasks');\n\n  var beforeOpeningTasksNum = tasksModel.getDaily(\"1\");\n  if (beforeOpeningTasksNum > 0) {\n    scheduleNotification('daily', 9, 0);\n  }\n\n  var afterStoreOpeningNum = tasksModel.getDaily(\"2\");\n  if (afterStoreOpeningNum > 0) {\n    scheduleNotification('daily', 11, 0);\n  }\n\n  var throughoutTheDayTasksNum = tasksModel.getDaily(\"3\");\n  if (throughoutTheDayTasksNum > 0) {\n    scheduleNotification('daily', 16, 0);\n    //4:00 PM\n  }\n\n  var reopeningTasksNum = tasksModel.getDaily(\"4\");\n  if (reopeningTasksNum > 0) {\n    scheduleNotification('daily', 17, 0);\n    //5:00 PM\n  }\n\n  var beforeLeavingTasksNum = tasksModel.getDaily(\"5\");\n  if (beforeLeavingTasksNum > 0) {\n    scheduleNotification('daily', 18, 30);\n    //6:30 PM\n  }\n\n  var weeklyTasksNum = tasksModel.getUncompletedTasks(\"2\");\n  if (weeklyTasksNum > 0) {\n    scheduleNotification('weekly', 9, 0);\n    //weekly\n  }\n\n  var monthlyTasksNum = tasksModel.getUncompletedTasks(\"3\");\n  if (monthlyTasksNum > 0) {\n    scheduleNotification('monthly', 9, 0);\n    //monthly\n  }\n\n  var semesterTasksNum = tasksModel.getUncompletedTasks(\"4\");\n  if (semesterTasksNum > 0) {\n    scheduleNotification('semester', 9, 0);\n    //semester\n  }\n\n  var yearlyTasksNum = tasksModel.getUncompletedTasks(\"5\");\n  if (yearlyTasksNum > 0) {\n    scheduleNotification('yearly', 9, 0);\n    //yearly\n  }\n\n}\n\n\n\nfunction scheduleNotification(type, hours, minutes) {\n  var today = new Date();\n  var date2 = new Date();\n  var x = new Date();\n  var currentTimeZoneOffsetInHours = x.getTimezoneOffset();\n  //alert(currentTimeZoneOffsetInHours);\n  var requestCode = 40;\n  switch (type.toLowerCase()) {\n    case 'yearly':\n      date2.setFullYear(today.getFullYear() + 1);\n      requestCode = 46;\n      break;\n    case 'semester':\n      date2.setMonth(today.getMonth() + 6 * 1);\n      requestCode = 45;\n      break;\n    case 'quarterly':\n      date2.setMonth(today.getMonth() + 3 * 1);\n      requestCode = 44;\n      break;\n    case 'monthly':\n      date2.setMonth(today.getMonth() + 1);\n      requestCode = 43;\n      break;\n    case 'weekly':\n      date2.setDate(today.getDate() + 7 * 1);\n      requestCode = 42;\n      break;\n    case 'daily':\n      //var hoursDif = today.getHours()-hours;\n\n      date2.setDate(today.getDate());\n      requestCode = 41 + hours;\n      break;\n    default:\n      date2 = undefined;\n      break;}\n\n  date2.setHours(hours);\n  //+((currentTimeZoneOffsetInHours*-1)/60));\n  date2.setMinutes(minutes);\n  date2.setSeconds(0);\n  date2.setMilliseconds(0);\n\n  //Ti.API.Info(\"type, \" + type + \" hours, \" + hours + \" minutes \" + minutes + \" date2 =\" + JSON.stringify(date2));\n  // var timeDiff = Math.abs(date2.getTime() - today.getTime());\n  // var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));\n  // alert(\"timeDiff = \"+timeDiff);\n  // alert(\"days = \"+diffDays);\n  notify('Incompleted High Priority Tasks', 'You have incompleted High Priority Tasks', date2, requestCode);\n}\n\nfunction notify(androidTitle, displayText, date, requestCode) {\n  //Ti.API.Info(\"notify on \" + JSON.stringify(date));\n  if (OS_IOS) {\n\n    var notification = Ti.App.iOS.scheduleLocalNotification({\n      userInfo: {\n        \"id\": \"\" + requestCode },\n\n      alertAction: \"update\", // or 'Update' instead of 'Open' in the alert dialog\n      alertBody: displayText, // Alert will display the following message\n      //badge: -1,// The badge value in the icon will be changed to 1\n      date: date });\n\n  } else {\n    //Import our module into our Titanium App\n    //var requestCode = requestCode;\n\n    //Ti.API.Info(\"requestcode: \" + requestCode.toString());\n    //Set an Alarm to publish a notification in about two minutes and repeat each minute\n    alarmManager.addAlarmNotification({\n      requestCode: requestCode,\n      year: date.getFullYear(),\n      month: date.getMonth(),\n      day: date.getDate(),\n      hour: date.getHours(),\n      minute: date.getMinutes(), //Set the number of minutes until the alarm should go off\n      contentTitle: androidTitle, //Set the title of the Notification that will appear\n      contentText: displayText,\n      playSound: true, //On notification play the default sound ( by default off )\n      vibrate: true, //On notification vibrate device ( by default off )\n      showLights: true,\n      icon: Ti.App.Android.R.drawable.appicon //Set the body of the notification that will apear\n      //sound: Ti.Filesystem.getResRawDirectory() + 'alarm', //Set a custom sound to play, located at: platform/android/res/raw/alarm.mp3\n      //repeat:60000 //You can use the words hourly,daily,weekly,monthly,yearly or you can provide milliseconds.\n      //Or as shown above you can provide the millesecond value\n    });\n    // var notification = Titanium.Android.createNotification({\n    // contentTitle: androidTitle,\n    // contentText : displayText,\n    // contentIntent: Ti.Android.createPendingIntent({\n    // intent: Ti.Android.createIntent({}),\n    // activity : Ti.Android.currentActivity,\n    // }),\n    // //icon: Ti.App.Android.R.drawable.warn,\n    // number: 1,\n    // when: date,\n    // });\n    // Ti.Android.NotificationManager.notify(1, notification);\n  }\n}\n\nvar args = arguments[0] || {},\nitems,\nfilterByCompleted = false;\n\nif (OS_IOS) {\n  $.tasks_list.setTitle(args.windowTitle);\n}\n\nvar secsCollaction = Alloy.createCollection('tasks');\n\nsecsCollaction.on('fetch', function () {\n  var sections = [];\n  secsCollaction.each(function (model) {\n\n    Ti.API.error(model.get('SectionDesc'));\n\n    sections.push(Alloy.createController('tasks/tasks_sections', {\n      SectionID: model.get('SectionID'),\n      TaskID: args.res,\n      SectionDesc: model.get('SectionDesc'),\n      filterByCompleted: filterByCompleted }).\n\n    getView());\n\n  });\n\n  $.list.setSections(sections);\n\n});\n\n// limit the time\ntry {\n  secsCollaction.fetch({\n    query: \"select SectionID,SectionDesc from tasks where TaskID=\" + args.res + \" group by SectionID \" });\n\n} catch (e) {\n  //Ti.API.Info('error -> '+JSON.stringify(e));\n}\n\nfunction showHideCompleted(e) {\n  if (e.source.title == \"Show completed\") {\n    e.source.setTitle(\"Hide Completed\");\n    filterByCompleted = false;\n\n  } else {\n    e.source.setTitle(\"Show completed\");\n    filterByCompleted = true;\n  }\n  try {\n    secsCollaction.fetch({\n      query: \"select SectionID,SectionDesc from tasks where TaskID=\" + args.res + \" group by SectionID \" });\n\n  } catch (e) {\n    //Ti.API.Info('error -> '+JSON.stringify(e));\n  }\n\n\n}\n\n/*\n   var taskClicked = function(e) {\n  \n   //Ti.API.Info(JSON.stringify(e));\n  \n   var item = e.section.getItemAt(e.itemIndex);\n  \n   var taskModel = Alloy.createModel('tasks_completed');\n  \n   if (item.completedId) {// so delete the task\n   taskModel.fetch({\n   id : item.completedId\n   });\n   taskModel.destroy();\n  \n   item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n   item.status.image = \"/images/noDone.png\";\n   item.completedId = null;\n  \n   } else {\n   taskModel.save({\n   CompletedDate : Alloy.Globals.getFullDate(),\n   TaskQuestionID : item.properties.TaskQuestionID\n   });\n   //item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n   item.status.image = \"/images/done.png\";\n   item.completedId = taskModel.get('id');\n  \n   }\n  \n   e.section.updateItemAt(e.itemIndex, item);\n  \n   };*/\n\nfunction swipeOnTask(e) {\n\n  var item = e.section.getItemAt(e.itemIndex);\n\n  var taskModel = Alloy.createModel('tasks_completed');\n\n  if (item.completedId) {// so delete the task\n    taskModel.fetch({\n      id: item.completedId });\n\n    taskModel.destroy();\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n    item.doneMark.visible = false;\n\n    item.completedId = null;\n\n  } else {\n    taskModel.save({\n      CompletedDate: Alloy.Globals.getFullDate(),\n      TaskQuestionID: item.properties.TaskQuestionID });\n\n    item.doneMark.visible = true;\n    item.completedId = taskModel.get('id');\n    //e.section.updateItemAt(e.itemIndex, item);\n\n  }\n\n  /*setTimeout(function() {\n     item.properties.height = 0;\n     item.properties.top = -80;\n     item.properties.searchableText = null;\n      e.section.updateItemAt(e.itemIndex, item);\n     }, $.completedTasks.getTitle() == \"Completed\" ? 5000 : 600);*/\n\n\n  e.section.updateItemAt(e.itemIndex, item);\n\n  if (OS_IOS) {\n    Ti.App.iOS.cancelLocalNotification(\"50\");\n    Ti.App.iOS.cancelLocalNotification(\"52\");\n    Ti.App.iOS.cancelLocalNotification(\"57\");\n    Ti.App.iOS.cancelLocalNotification(\"58\");\n    Ti.App.iOS.cancelLocalNotification(\"59\");\n    Ti.App.iOS.cancelLocalNotification(\"42\");\n    Ti.App.iOS.cancelLocalNotification(\"43\");\n    Ti.App.iOS.cancelLocalNotification(\"44\");\n    Ti.App.iOS.cancelLocalNotification(\"45\");\n    Ti.App.iOS.cancelLocalNotification(\"46\");\n    checkIncompleteTasks();\n\n  } else {\n\n    alarmManager.cancelAlarmNotification(50);\n    alarmManager.cancelAlarmNotification(52);\n    alarmManager.cancelAlarmNotification(57);\n    alarmManager.cancelAlarmNotification(58);\n    alarmManager.cancelAlarmNotification(59);\n    alarmManager.cancelAlarmNotification(42);\n    alarmManager.cancelAlarmNotification(43);\n    alarmManager.cancelAlarmNotification(44);\n    alarmManager.cancelAlarmNotification(45);\n    alarmManager.cancelAlarmNotification(46);\n    checkIncompleteTasks();\n\n  }\n\n}\n\n$.tasks_list.addEventListener(\"close\", function () {\n  $.destroy();\n});"]}