{"version":3,"sources":["template.js","app/controllers/audit/scoreCardQuestions.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzrKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/exsalameh/Desktop/iProductive-2/Resources/iphone/alloy/controllers/audit/scoreCardQuestions.js","sourceRoot":"/Users/exsalameh/Desktop/iProductive-2","sourcesContent":["var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n\n\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\t\n\trequire('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = 'audit/scoreCardQuestions';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar __parentSymbol = __processArg(arguments[0], '__parentSymbol');\n\t\tvar $model = __processArg(arguments[0], '$model');\n\t\tvar __itemTemplate = __processArg(arguments[0], '__itemTemplate');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\tAlloy.Collections.instance('questions_answers_scorecard');\n\n\t// Generated UI code\n\t$.__views[\"questions\"] = (require(\"xp.ui\").createWindow || Ti.UI.createWindow)(\n{backgroundColor:\"#ffffff\",translucent:true,tintColor:Alloy.CFG.tintColor,navTintColor:\"#ffffff\",barColor:Alloy.CFG.borderColor,includeOpaqueBars:true,autoAdjustScrollViewInsets:true,statusBarStyle:Ti.UI.iOS.StatusBar.LIGHT_CONTENT,extendEdges:[Ti.UI.EXTEND_EDGE_TOP,Ti.UI.EXTEND_EDGE_BOTTOM,],id:\"questions\",}\n);\n$.__views[\"questions\"] && $.addTopLevelView($.__views[\"questions\"]);\nvar __alloyId279={};var __alloyId282=[];var __alloyId284={type:'Ti.UI.View',childTemplates: (function() {var __alloyId285=[];var __alloyId287={type:'Ti.UI.Label',bindId:'QuestionDesc',properties:{textAlign:Ti.UI.TEXT_ALIGNMENT_LEFT,left:22,top:10,verticalAlign:\"top\",color:\"black\",font:{fontSize:20,fontWeight:\"bold\",},bindId:\"QuestionDesc\",},};__alloyId285.push(__alloyId287);var __alloyId289={type:'Ti.UI.View',bindId:'answerContainer',childTemplates: (function() {var __alloyId290=[];var __alloyId292={type:'Ti.UI.Label',properties:{textAlign:Ti.UI.TEXT_ALIGNMENT_LEFT,text:\"Answer: \",left:22,color:\"black\",font:{fontSize:20,},},};__alloyId290.push(__alloyId292);var __alloyId294={type:'Ti.UI.Label',bindId:'answer',properties:{textAlign:Ti.UI.TEXT_ALIGNMENT_LEFT,left:105,color:Alloy.CFG.borderColor,font:{fontSize:20,},bindId:\"answer\",},};__alloyId290.push(__alloyId294);return __alloyId290;})(),properties:{top:10,left:0,right:0,bottom:8,height:Ti.UI.SIZE,bindId:\"answerContainer\",},};__alloyId285.push(__alloyId289);return __alloyId285;})(),properties:{left:0,right:0,layout:\"vertical\",height:Ti.UI.SIZE,bottom:0,},};__alloyId282.push(__alloyId284);var __alloyId281 = {properties:{width:\"100%\",height:Ti.UI.SIZE,selectionStyle:Titanium.UI.iOS.ListViewCellSelectionStyle.NONE,name:\"elementTemplate\",},childTemplates:__alloyId282,};__alloyId279[\"elementTemplate\"]=__alloyId281;$.__views[\"list\"] = Ti.UI.createListView(\n{defaultItemTemplate:\"elementTemplate\",templates:__alloyId279,id:\"list\",}\n);\n$.__views[\"questions\"].add($.__views[\"list\"]);\nlistClicked?$.addListener($.__views[\"list\"],'itemclick',listClicked):__defers['$.__views[\"list\"]!itemclick!listClicked']=true;var __alloyId296 = [];__alloyId296.push(\"Yes\");__alloyId296.push(\"No\");$.__views[\"deleteImage\"] = Ti.UI.createAlertDialog(\n{buttonNames:__alloyId296,message:\"Are you sure you want to delete this image?\",id:\"deleteImage\",}\n);\n$.__views[\"answersLayer\"] = Ti.UI.createView(\n{opacity:1,id:\"answersLayer\",}\n);\n$.__views[\"answersLayer\"] && $.addTopLevelView($.__views[\"answersLayer\"]);\nhideanswerLayer?$.addListener($.__views[\"answersLayer\"],'click',hideanswerLayer):__defers['$.__views[\"answersLayer\"]!click!hideanswerLayer']=true;$.__views[\"__alloyId299\"] = Ti.UI.createView(\n{backgroundColor:\"#000000\",opacity:0.7,id:\"__alloyId299\",}\n);\n$.__views[\"answersLayer\"].add($.__views[\"__alloyId299\"]);\n$.__views[\"__alloyId300\"] = Ti.UI.createView(\n{width:Ti.UI.SIZE,height:Ti.UI.SIZE,backgroundColor:\"white\",id:\"__alloyId300\",}\n);\n$.__views[\"answersLayer\"].add($.__views[\"__alloyId300\"]);\n$.__views[\"answersSection\"] = Ti.UI.createListSection(\n{id:\"answersSection\",}\n);\nvar __alloyId303=Alloy.Collections['questions_answers_scorecard'] || questions_answers_scorecard;function __alloyId304(e) {   if (e && e.fromAdapter) { return; }   var opts = __alloyId304.opts || {};\tvar models = __alloyId303.models;\tvar len = models.length;var __alloyId301=[];\tfor (var i = 0; i < len; i++) {\t\tvar __alloyId302 = models[i];\t\t__alloyId302.__transform = _.isFunction(__alloyId302.transform)?__alloyId302.transform():__alloyId302.toJSON();\t}opts.animation ? $.__views[\"answersSection\"].setItems(__alloyId301, opts.animation) : $.__views[\"answersSection\"].items = __alloyId301;};__alloyId303.on('fetch destroy change add remove reset',__alloyId304);var __alloyId305=[];__alloyId305.push($.__views[\"answersSection\"]);$.__views[\"answerList\"] = Ti.UI.createListView(\n{defaultItemTemplate:Ti.UI.LIST_ITEM_TEMPLATE_SUBTITLE,sections:__alloyId305,borderRadius:6,borderColor:\"#115EAC\",borderWidth:3,separatorColor:\"#115EAC\",id:\"answerList\",height:Ti.UI.SIZE,width:300,bubbleParent:false,}\n);\n$.__views[\"__alloyId300\"].add($.__views[\"answerList\"]);\nselectAnswer?$.addListener($.__views[\"answerList\"],'itemclick',selectAnswer):__defers['$.__views[\"answerList\"]!itemclick!selectAnswer']=true;exports.destroy = function () {__alloyId303 && __alloyId303.off('fetch destroy change add remove reset',__alloyId304);};\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t__defers['$.__views[\"list\"]!itemclick!listClicked'] && $.addListener($.__views[\"list\"],'itemclick',listClicked);__defers['$.__views[\"answersLayer\"]!click!hideanswerLayer'] && $.addListener($.__views[\"answersLayer\"],'click',hideanswerLayer);__defers['$.__views[\"answerList\"]!itemclick!selectAnswer'] && $.addListener($.__views[\"answerList\"],'itemclick',selectAnswer);\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;\n","var args = arguments[0] || {},\nganswerObj = null;\nif (args.notEditable) {// show search bar when not inComplete\n  $.list.searchView = Ti.UI.createSearchBar({\n    hintText: \"Search ...\",\n    barColor: \"#115EAC\",\n    keyboardType: Titanium.UI.RETURNKEY_SEARCH,\n    returnKeyType: Titanium.UI.RETURNKEY_SEARCH });\n\n  $.list.setTop(62);\n  $.questions.autoAdjustScrollViewInsets = false;\n}\nif (OS_IOS) {\n  $.questions.setTitle(args.template.title);\n}\n\nvar secsCollaction = Alloy.createCollection('sections');\n\nsecsCollaction.on('fetch', function () {\n  var sections = [];\n\n  if (secsCollaction.models.length == 0) {\n\n    var model = Alloy.createModel('sections');\n    model.fetch({\n      id: args.section.SectionID + \"-\" + args.AuditID });\n\n\n    $.list.setSections([Alloy.createController('audit/scoreCard_question_section', {\n      SectionID: model.get('SectionID'),\n      AuditID: model.get('AuditID'),\n      auditRecordID: args.auditRecordID,\n      deptCode: args.deptCode,\n      title: model.get('SectionDesc'),\n      weightTotal: args.section.weightTotal,\n      weight: model.getWeight(args.auditRecordID), // get weight of answered questions\n      notEditable: args.notEditable,\n      template: args.template }).\n    getView()]);\n\n    return;\n  }\n\n  secsCollaction.each(function (model) {\n\n    sections.push(Alloy.createController('audit/scoreCard_question_section', {\n      SectionID: model.get('SectionID'),\n      AuditID: model.get('AuditID'),\n      auditRecordID: args.auditRecordID,\n      deptCode: args.deptCode,\n      title: model.get('SectionDesc'),\n      weightTotal: model.get('weightTotal'),\n      weight: model.getWeight(args.auditRecordID), // get weight of answered questions\n      notEditable: args.notEditable,\n      template: args.template }).\n    getView());\n\n  });\n\n  $.list.setSections(sections);\n\n});\n\n//Ti.API.Info (\"SELECT s.* FROM sections s JOIN questions_scorecard q ON q.AuditID = s.AuditID AND q.SectionID = s.SectionID WHERE s.AuditID = '\" + args.AuditID + \"' AND s.ParentID = '\" + args.section.SectionID + \"' group by s.SectionID ORDER BY s.SectionOrder\");\ntry {\n  secsCollaction.fetch({\n    query: \"SELECT s.* FROM sections s JOIN questions_scorecard q ON q.AuditID = s.AuditID AND q.SectionID = s.SectionID WHERE s.AuditID = '\" + args.AuditID + \"' AND s.ParentID = '\" + args.section.SectionID + \"' group by s.SectionID ORDER BY s.SectionOrder\" });\n\n} catch (e) {\n  //Ti.API.Info('error -> '+JSON.stringify(e));\n}\n\n\nfunction hideanswerLayer(e) {\n  //$.answersLayer.setOpacity(0);\n  ganswerObj = null;\n  $.questions.remove($.answersLayer);\n}\n\nfunction selectAnswer(e) {\n\n  var item = e.section.getItemAt(e.itemIndex);\n  // answer text UI\n  ganswerObj.item.answer.text = item.properties.title;\n  // model answer string\n  ganswerObj.item.properties.Answerstring = item.properties.title;\n  ganswerObj.item.properties.AnswerID = item.properties.AnswerID;\n\n  ganswerObj.item.properties.Answervalue = item.properties.Value;\n  ganswerObj.item.properties.QuestionValue = item.properties.Weight;\n\n  ganswerObj.section.updateItemAt(ganswerObj.itemIndex, ganswerObj.item);\n\n  var answerModel = Alloy.createModel('answers');\n\n  answerModel.fetch({\n    id: ganswerObj.item.properties.answerID });\n\n\n  answerModel.save({\n    Answerstring: item.properties.title,\n    AnswerID: item.properties.AnswerID,\n    Answervalue: item.properties.Value,\n    QuestionValue: item.properties.Weight,\n    AnswerDate: Alloy.Globals.getFullDate() });\n\n\n  ganswerObj = null;\n  hideanswerLayer();\n\n}\n\nfunction listClicked(e) {\n\n  if (args.notEditable) {\n    return false;\n  }\n\n  var item = e.section.getItemAt(e.itemIndex);\n\n  Ti.API.debug(\"!!\" + JSON.stringify(item));\n\n  /*  (e.bindId == \"delete\") {    //  ebrahim left this code if they change thier mind to need delete\n                                              item.answer.text = \"\";\n                                              item.properties.Answervalue = null;\n                                              item.properties.Answerstring = null;\n                                              item.Answerstring = null;\n                                               e.section.updateItemAt(e.itemIndex, item);\n                                               var answerModel = Alloy.createModel('answers');\n                                              answerModel.fetch({\n                                              id : item.properties.answerID,\n                                              });\n                                              answerModel.save({\n                                              Answerstring : null,\n                                              Answervalue : null,\n                                              QuestionValue : null,\n                                              AnswerDate : null,\n                                              });\n                                               */\n\n\n\n  Alloy.Collections.questions_answers_scorecard.on('fetch', function () {\n\n    var rows = [];\n    Alloy.Collections.questions_answers_scorecard.each(function (model) {\n\n      rows.push({\n        properties: _.extend(model.toJSON(), {\n          AnswerID: model.get('AnswerID'),\n          Value: model.get('Value'),\n          Weight: model.get('Weight'),\n          title: model.get('Answer'),\n          color: item.properties.Answerstring == model.get(\"Answer\") ? Alloy.CFG.borderColor : \"black\",\n          font: {\n            fontWeight: item.properties.Answerstring == model.get(\"Answer\") ? \"bold\" : null,\n            fontSize: item.properties.Answerstring == model.get(\"Answer\") ? 25 : 22 },\n\n          height: 70 }) });\n\n\n\n\n    });\n\n    $.answersSection.setItems(rows);\n  });\n\n  ganswerObj = {\n    item: item,\n    section: e.section,\n    itemIndex: e.itemIndex };\n\n  try {\n    Alloy.Collections.questions_answers_scorecard.fetch({\n      query: \"select * from questions_answers_scorecard where QuestionID=\" + item.properties.QuestionID });\n\n  } catch (e) {\n    //Ti.API.Info('error -> '+JSON.stringify(e));\n  }\n\n  Alloy.Collections.questions_answers_scorecard.off(\"fetch\");\n  //$.answersLayer.animate({\n  //   opacity : 1,\n  // duration : 600\n  //});\n  $.questions.add($.answersLayer);\n\n}\n\nif (!args.notEditable) {\n\n  if (OS_ANDROID) {\n    Alloy.Globals.activeView = 2;\n    Alloy.Globals.saveQuestions = function () {\n      Alloy.Globals.pageStack.close($.questions);\n      args.saveCallBack();\n      resetNavBar();\n    };\n    Alloy.Globals.backQuestions = function () {\n      Alloy.Globals.pageStack.close($.questions);\n      resetNavBar();\n    };\n    Alloy.Globals.activity.invalidateOptionsMenu();\n  }\n\n\n  if (OS_IOS) {\n\n    var saveBtn = Ti.UI.createButton({\n      image: '/images/icons/save.png' });\n\n    saveBtn.addEventListener('click', function () {\n      Alloy.Globals.pageStack.close($.questions);\n      args.saveCallBack();\n    });\n    $.questions.setRightNavButton(saveBtn);\n\n    var closeBtn = Ti.UI.createButton({\n      image: '/images/icons/back.png' });\n\n    closeBtn.addEventListener('click', function () {\n      Alloy.Globals.pageStack.close($.questions);\n    });\n    $.questions.setLeftNavButton(closeBtn);\n  }\n}\n\n$.questions.addEventListener(\"close\", function () {\n  $.destroy();\n  ganswerObj = null;\n});\n\nfunction resetNavBar() {\n\n  //Ti.API.Info(\"reseting nav bar\");\n  if (OS_ANDROID) {\n    Alloy.Globals.activeView = 1;\n    Alloy.Globals.activity.invalidateOptionsMenu();\n  }\n}"]}