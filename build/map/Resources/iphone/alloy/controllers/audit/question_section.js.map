{"version":3,"sources":["template.js","app/controllers/audit/question_section.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACltOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/exsalameh/Desktop/iProductive-2/Resources/iphone/alloy/controllers/audit/question_section.js","sourceRoot":"/Users/exsalameh/Desktop/iProductive-2","sourcesContent":["var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n\n\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\t\n\trequire('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = 'audit/question_section';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar __parentSymbol = __processArg(arguments[0], '__parentSymbol');\n\t\tvar $model = __processArg(arguments[0], '$model');\n\t\tvar __itemTemplate = __processArg(arguments[0], '__itemTemplate');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\t\n\n\t// Generated UI code\n\t$.__views[\"headerView\"] = Ti.UI.createView(\n{backgroundColor:\"#7092BE\",height:60,id:\"headerView\",}\n);\n$.__views[\"titleLbl\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,left:10,color:\"#ffffff\",id:\"titleLbl\",}\n);\n$.__views[\"headerView\"].add($.__views[\"titleLbl\"]);\n$.__views[\"__alloyId154\"] = Ti.UI.createView(\n{right:10,width:Ti.UI.SIZE,height:40,layout:\"horizontal\",id:\"__alloyId154\",}\n);\n$.__views[\"headerView\"].add($.__views[\"__alloyId154\"]);\n$.__views[\"weightLbl\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,right:10,height:40,color:\"#ffffff\",id:\"weightLbl\",}\n);\n$.__views[\"__alloyId154\"].add($.__views[\"weightLbl\"]);\n$.__views[\"weightTotalLbl\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,right:10,height:40,color:\"#ffffff\",id:\"weightTotalLbl\",}\n);\n$.__views[\"__alloyId154\"].add($.__views[\"weightTotalLbl\"]);\n$.__views[\"mySec\"] = Ti.UI.createListSection(\n{headerView:$.__views[\"headerView\"],id:\"mySec\",}\n);\n$.__views[\"mySec\"] && $.addTopLevelView($.__views[\"mySec\"]);\nexports.destroy = function () {};\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;\n","var args = arguments[0] || {},\nisScoreCard = args.template.type == 2;\n\n$.titleLbl.setText(args.title);\n$.weightLbl.setText(args.weight);\n$.weightTotalLbl.setText(' / ' + args.weightTotal);\n\n//Ti.API.Info('====#########>>>>> args.isIncomplete = ' + args.isIncomplete);\n\n\n\n// if(args.isIncomplete){\n//   loadUserCachedQuestions();\n// } else {\n//   syncData();\n// }\n\nsyncData();\n\nfunction loadUserCachedQuestions() {\n  var usersData = Ti.App.Properties.getList(\"CachedDataByUser\", []).filter(function (user) {\n    return user.user == Ti.App.Properties.getString('lastLoginUser', \"noUser\");\n  });\n  var rows = [];\n  if (usersData.length) {\n    var myData = usersData[0].cachedDraftsQuestions;\n    var rows = [];\n    myData.forEach(function (model) {\n      var myData = model;\n      //Ti.API.Info('########### myData: ' + JSON.stringify(myData));\n      var PreviousAnswer = '';\n      if (args.isIncomplete && myData.Previous_Answer != null) {\n        PreviousAnswer = myData.Previous_Answer + \", \" + myData.Previous_Comment ? myData.Previous_Comment : \"\";\n        if (myData.Previous_Comment != null) {\n          PreviousAnswer = myData.Previous_Answer + \", \" + myData.Previous_Comment;\n        }\n      }\n      var PreviousAnswerValue = '';\n      if (args.isIncomplete && myData.Previous_AnswerValue != null) {\n        PreviousAnswerValue = myData.Previous_AnswerValue;\n      }\n      //Ti.API.Info(\"FUCKIT SectionDesc=\" + JSON.stringify(myData));\n      rows.push({\n        properties: _.extend(model, {\n          answerID: myData.id,\n          searchableText: myData.QuestionDesc\n          //defaultItemTemplate: args.deptCode == \"SRC\" ? \"elementFuckedTemplate\": \"elementTemplate\"\n        }),\n\n\n        ResponsibilityDesc: {\n          text: myData.ResponsibilityDesc },\n\n        QuestionDesc: {\n          text: myData.QuestionDesc },\n\n        PreviousAnswer: {\n          value: PreviousAnswer,\n          protectedValue: PreviousAnswer },\n\n        PreviousAnswerValue: {\n          value: PreviousAnswerValue,\n          protectedValue: PreviousAnswerValue },\n\n        yes: {\n          backgroundColor: myData.Answerstring == 'Yes' ? \"green\" : \"gray\",\n          visible: args.deptCode == \"SRC\" ? false : true\n          //zIndex: args.deptCode == \"SRC\" ? \"-1\": \"1\"\n        },\n        no: {\n          backgroundColor: myData.Answerstring == 'No' ? \"red\" : \"gray\",\n          visible: args.deptCode == \"SRC\" ? false : true\n          //zIndex: args.deptCode == \"SRC\" ? \"-1\": \"1\"\n        },\n        na: {\n          backgroundColor: myData.Answerstring == 'NA' ? \"#333333\" : \"gray\",\n          visible: args.deptCode == \"SRC\" ? false : true\n          //zIndex: args.deptCode == \"SRC\" ? \"-1\": \"1\"\n        },\n        pd: {\n          backgroundColor: myData.Answerstring == 'PD' ? \"#333333\" : \"gray\",\n          visible: args.deptCode == \"IT\" && args.deptCode != \"SRC\" ? true : false\n          // zIndex:  args.deptCode == \"IT\" && args.deptCode != \"SRC\" ? \"1\": \"-1\"\n        },\n\n        fo: {\n          backgroundColor: myData.Answerstring == 'FO' ? \"#333333\" : \"gray\",\n          visible: false },\n\n\n        zero: {\n          backgroundColor: myData.Answerstring == '0' ? \"#0BD318\" : \"#8ebbf7\",\n          visible: args.deptCode == \"SRC\" ? true : false\n          //zIndex : args.deptCode == \"SRC\" ? 100 : -1\n        },\n\n        one: {\n          backgroundColor: myData.Answerstring == '1' ? \"#0BD318\" : \"#77adf5\",\n          visible: args.deptCode == \"SRC\" ? true : false },\n\n\n        two: {\n          backgroundColor: myData.Answerstring == '2' ? \"#0BD318\" : \"#609ff3\",\n          visible: args.deptCode == \"SRC\" ? true : false },\n\n\n        three: {\n          backgroundColor: myData.Answerstring == '3' ? \"#0BD318\" : \"#4a92f2\",\n          visible: args.deptCode == \"SRC\" ? true : false },\n\n\n        four: {\n          backgroundColor: myData.Answerstring == '4' ? \"#0BD318\" : \"#3384f0\",\n          visible: args.deptCode == \"SRC\" ? true : false },\n\n\n        five: {\n          backgroundColor: myData.Answerstring == '5' ? \"#0BD318\" : \"#1d77ef\",\n          visible: args.deptCode == \"SRC\" ? true : false },\n\n\n        commentPhotosContainer: {\n          height: myData.Image !== null || myData.Image1 !== null ? 155 : 115 },\n\n        commentTxtArea: {\n          value: myData.Comment == null ? \"\" : myData.Comment,\n          editable: args.notEditable ? false : true,\n          suppressReturn: false,\n          returnKeyType: Ti.UI.RETURNKEY_DEFAULT },\n\n        QWeight: myData.QWeight,\n        QValue: myData.QValue,\n        Image: {\n          image: myData.Image },\n\n        Image1: {\n          image: myData.Image1 } });\n\n\n    });\n    $.mySec.setItems(rows);\n  }\n}\n\nfunction syncData() {\n  var qCollaction = Alloy.createCollection('questions');\n  //Ti.API.Info(\"args.deptCode= \" + args.deptCode);\n\n  qCollaction.on('fetch', function () {\n    var rows = [];\n    qCollaction.each(function (model) {\n      //Ti.API.Info(' trying to fetch qCollection<=============');\n      var myData = model.toJSON();\n      //Ti.API.Info('########### myData: ' + JSON.stringify(myData));\n      var PreviousAnswer = '';\n      if (args.isIncomplete && myData.Previous_Answer != null) {\n        PreviousAnswer = myData.Previous_Answer + \"\\n\" + myData.Previous_Comment ? myData.Previous_Comment : \"\";\n        if (myData.Previous_Comment != null) {\n          PreviousAnswer = myData.Previous_Answer + \"\\n\" + myData.Previous_Comment;\n        }\n      }\n      var PreviousAnswerValue = '';\n      if (args.isIncomplete && myData.Previous_AnswerValue != null) {\n        PreviousAnswerValue = myData.Previous_AnswerValue;\n      }\n\n      //Ti.API.Info(\"FUCKIT SectionDesc=\" + JSON.stringify(myData));\n      rows.push({\n        properties: _.extend(model.toJSON(), {\n          answerID: myData.id,\n          searchableText: myData.QuestionDesc\n          //defaultItemTemplate: args.deptCode == \"SRC\" ? \"elementFuckedTemplate\": \"elementTemplate\"\n        }),\n\n\n        ResponsibilityDesc: {\n          text: myData.ResponsibilityDesc },\n\n        QuestionDesc: {\n          text: myData.QuestionDesc },\n\n        PreviousAnswer: {\n          value: PreviousAnswer,\n          protectedValue: PreviousAnswer },\n\n        PreviousAnswerValue: {\n          value: PreviousAnswerValue,\n          protectedValue: PreviousAnswerValue },\n\n        yes: {\n          backgroundColor: myData.Answerstring == 'Yes' ? \"green\" : \"gray\",\n          visible: args.deptCode == \"SRC\" ? false : true\n          //zIndex: args.deptCode == \"SRC\" ? \"-1\": \"1\"\n        },\n        no: {\n          backgroundColor: myData.Answerstring == 'No' ? \"red\" : \"gray\",\n          visible: args.deptCode == \"SRC\" ? false : true\n          //zIndex: args.deptCode == \"SRC\" ? \"-1\": \"1\"\n        },\n        na: {\n          backgroundColor: myData.Answerstring == 'NA' ? \"#333333\" : \"gray\",\n          visible: args.deptCode == \"SRC\" ? false : true\n          //zIndex: args.deptCode == \"SRC\" ? \"-1\": \"1\"\n        },\n        pd: {\n          backgroundColor: myData.Answerstring == 'PD' ? \"#333333\" : \"gray\",\n          visible: args.deptCode == \"IT\" && args.deptCode != \"SRC\" ? true : false\n          // zIndex:  args.deptCode == \"IT\" && args.deptCode != \"SRC\" ? \"1\": \"-1\"\n        },\n\n        fo: {\n          backgroundColor: myData.Answerstring == 'FO' ? \"#333333\" : \"gray\",\n          visible: false },\n\n\n        zero: {\n          backgroundColor: myData.Answerstring == '0' ? \"#0BD318\" : \"#8ebbf7\",\n          visible: args.deptCode == \"SRC\" ? true : false\n          //zIndex : args.deptCode == \"SRC\" ? 100 : -1\n        },\n\n        one: {\n          backgroundColor: myData.Answerstring == '1' ? \"#0BD318\" : \"#77adf5\",\n          visible: args.deptCode == \"SRC\" ? true : false },\n\n\n        two: {\n          backgroundColor: myData.Answerstring == '2' ? \"#0BD318\" : \"#609ff3\",\n          visible: args.deptCode == \"SRC\" ? true : false },\n\n\n        three: {\n          backgroundColor: myData.Answerstring == '3' ? \"#0BD318\" : \"#4a92f2\",\n          visible: args.deptCode == \"SRC\" ? true : false },\n\n\n        four: {\n          backgroundColor: myData.Answerstring == '4' ? \"#0BD318\" : \"#3384f0\",\n          visible: args.deptCode == \"SRC\" ? true : false },\n\n\n        five: {\n          backgroundColor: myData.Answerstring == '5' ? \"#0BD318\" : \"#1d77ef\",\n          visible: args.deptCode == \"SRC\" ? true : false },\n\n\n        commentPhotosContainer: {\n          height: myData.Image !== null || myData.Image1 !== null ? 155 : 115 },\n\n        commentTxtArea: {\n          value: myData.Comment == null ? \"\" : myData.Comment,\n          editable: args.notEditable ? false : true,\n          suppressReturn: false,\n          returnKeyType: Ti.UI.RETURNKEY_DEFAULT },\n\n        QWeight: myData.QWeight,\n        QValue: myData.QValue,\n        Image: {\n          image: myData.Image },\n\n        Image1: {\n          image: myData.Image1 } });\n\n\n    });\n    //$.mySec.defaultItemTemplate = 'elementFuckedTemplate';\n    $.mySec.setItems(rows);\n\n  });\n  var tableName = isScoreCard ? 'questions_scorecard' : 'questions',\n  select = isScoreCard ? \"\" : \" AND q.Show > 0 ORDER BY q.QuestionOrder ASC\";\n  var query = \"SELECT a.*, q.* FROM \" + tableName + \" q JOIN answers a ON q.QuestionID = a.QuestionID WHERE q.AuditID = \" + args.AuditID + \" AND q.SectionID = \" + args.SectionID + \" AND a.AuditRecordID = \" + args.auditRecordID + select;\n\n  //Ti.API.Info(\"auditRecordID= \" + args.auditRecordID);\n\n  if (args.isIncomplete) {\n    if (Alloy.Globals.HasLP) {\n      query = \"SELECT a.*, q.*, s.*, h.Previous_Answer, h.Previous_Comment FROM \" + tableName + \" q JOIN answers a ON q.QuestionID = a.QuestionID JOIN sections s ON q.SectionID = s.SectionID LEFT JOIN auditHistory h ON  h.QuestionID = a.QuestionID \" + \" AND h.AuditRecordID = \" + args.auditRecordID + \" AND h.AuditID = \" + args.AuditID + \" WHERE q.AuditID = \" + args.AuditID + \" AND q.SectionID = \" + args.SectionID + \" AND a.AuditRecordID = \" + args.auditRecordID + select;\n    } else {\n\n    } //query = \"SELECT a.*, q.*, s.* FROM \" + tableName + \" q JOIN answers a ON q.QuestionID = a.QuestionID JOIN sections s ON q.SectionID = s.SectionID WHERE q.AuditID = \" + args.AuditID + \" AND q.SectionID = \" + args.SectionID + \" AND a.AuditRecordID = \" + args.auditRecordID + select;\n    //query = \"SELECT a.*, q.*, s.*, h.Previous_Answer FROM \" + tableName + \" q JOIN answers a ON q.QuestionID = a.QuestionID JOIN sections s ON q.SectionID = s.SectionID JOIN auditHistory h ON  h.QuestionID = a.QuestionID WHERE q.AuditID = \" + args.AuditID + \" AND q.SectionID = \" + args.SectionID + \" AND a.AuditRecordID = \" + args.auditRecordID + \" AND h.AuditRecordID = \" + args.auditRecordID + \" AND h.AuditID = \" + args.AuditID + select;\n  } else {\n    if (Alloy.Globals.HasLP) {\n      query = \"SELECT a.*, q.*, s.* FROM \" + tableName + \" q JOIN answers a ON q.QuestionID = a.QuestionID JOIN sections s ON q.SectionID = s.SectionID WHERE q.AuditID = \" + args.AuditID + \" AND q.SectionID = \" + args.SectionID + \" AND a.AuditRecordID = \" + args.auditRecordID + select;\n    } else {\n      //query = \"SELECT a.*, q.* FROM \" + tableName + \" q JOIN answers a ON q.QuestionID = a.QuestionID WHERE q.AuditID = \" + args.AuditID + \" AND q.SectionID = \" + args.SectionID + \" AND a.AuditRecordID = \" + args.auditRecordID + select;\n    }\n\n  }\n  //Ti.API.Info(\"FUCKIT Query= \" + \"SELECT COUNT(*) as mycount, a.*, q.* FROM \" + tableName + \" q JOIN answers a ON q.QuestionID = a.QuestionID WHERE q.AuditID = \" + args.AuditID + \" AND q.SectionID = \" + args.SectionID + \" AND a.AuditRecordID = \" + args.auditRecordID + select);\n  try {\n    qCollaction.fetch({\n      query: query });\n\n  } catch (e) {\n    //Ti.API.Info('error -> ' + JSON.stringify(e));\n  }\n}"]}