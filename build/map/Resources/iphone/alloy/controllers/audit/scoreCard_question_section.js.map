{"version":3,"sources":["template.js","app/controllers/audit/scoreCard_question_section.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ADSA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/exsalameh/Desktop/iProductive-2/Resources/iphone/alloy/controllers/audit/scoreCard_question_section.js","sourceRoot":"/Users/exsalameh/Desktop/iProductive-2","sourcesContent":["var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n\n\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\t\n\trequire('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = 'audit/scoreCard_question_section';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar __parentSymbol = __processArg(arguments[0], '__parentSymbol');\n\t\tvar $model = __processArg(arguments[0], '$model');\n\t\tvar __itemTemplate = __processArg(arguments[0], '__itemTemplate');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\t\n\n\t// Generated UI code\n\t$.__views[\"headerView\"] = Ti.UI.createView(\n{backgroundColor:\"#7092BE\",height:60,id:\"headerView\",}\n);\n$.__views[\"titleLbl\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,left:10,color:\"#ffffff\",id:\"titleLbl\",}\n);\n$.__views[\"headerView\"].add($.__views[\"titleLbl\"]);\n$.__views[\"mySec\"] = Ti.UI.createListSection(\n{headerView:$.__views[\"headerView\"],id:\"mySec\",}\n);\n$.__views[\"mySec\"] && $.addTopLevelView($.__views[\"mySec\"]);\nexports.destroy = function () {};\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;\n","var args = arguments[0] || {};\n\n$.titleLbl.setText(args.title);\n//$.weightLbl.setText(args.weight);\n//$.weightTotalLbl.setText(' / ' + args.weightTotal);\n\nvar qCollaction = Alloy.createCollection('questions_scorecard');\n\nqCollaction.on('fetch', function () {\n  var rows = [];\n  qCollaction.each(function (model) {\n\n    rows.push({\n      properties: _.extend(model.toJSON(), {\n        answerID: model.get('id'),\n        searchableText: model.get('QuestionDesc') }),\n\n      id: model.get('id'),\n      AuditRecordID: model.get('AuditRecordID'),\n      QuestionID: model.get('QuestionID'),\n      AnswerID: model.get('AnswerID'),\n      Answerstring: model.get('Answerstring'),\n      Answervalue: model.get('Answervalue'),\n      QuestionValue: model.get('QuestionValue'),\n      AnswerDate: model.get('AnswerDate'),\n      uploaded_date: model.get('uploaded_date'),\n      AuditID: model.get('uploaded_date'),\n      SectionID: model.get('SectionID'),\n      QuestionDesc: model.get('QuestionDesc'),\n      QuestionDesc: {\n        text: model.get('QuestionDesc') },\n\n      answer: {\n        text: model.get('Answerstring') } });\n\n\n  });\n\n  $.mySec.setItems(rows);\n\n});\ntry {\n  qCollaction.fetch({\n    query: \"SELECT a.*, q.* FROM  questions_scorecard q JOIN answers a ON q.QuestionID = a.QuestionID WHERE q.AuditID = \" + args.AuditID + \" AND q.SectionID = \" + args.SectionID + \" AND a.AuditRecordID = \" + args.auditRecordID });\n\n} catch (e) {\n  //Ti.API.Info('error -> '+JSON.stringify(e));\n}"]}