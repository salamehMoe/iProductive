{"version":3,"sources":["template.js","app/controllers/synchronization.js"],"names":[],"mappingsvhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/exsalameh/Desktop/iProductive-2/Resources/iphone/alloy/controllers/synchronization.js","sourceRoot":"/Users/exsalameh/Desktop/iProductive-2","sourcesContent":["var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n\n\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\t\n\trequire('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = 'synchronization';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar __parentSymbol = __processArg(arguments[0], '__parentSymbol');\n\t\tvar $model = __processArg(arguments[0], '$model');\n\t\tvar __itemTemplate = __processArg(arguments[0], '__itemTemplate');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\tAlloy.Collections.instance('auditRecord');Alloy.Collections.instance('templates');Alloy.Collections.instance('tasks');Alloy.Collections.instance('tasks_completed');Alloy.Collections.instance('questions');Alloy.Models.instance('user');\n\n\t// Generated UI code\n\t$.__views[\"synchronization\"] = (require(\"xp.ui\").createWindow || Ti.UI.createWindow)(\n{backgroundColor:\"#ffffff\",translucent:true,tintColor:Alloy.CFG.tintColor,navTintColor:\"#ffffff\",barColor:Alloy.CFG.borderColor,includeOpaqueBars:true,autoAdjustScrollViewInsets:true,statusBarStyle:Ti.UI.iOS.StatusBar.LIGHT_CONTENT,extendEdges:[Ti.UI.EXTEND_EDGE_TOP,Ti.UI.EXTEND_EDGE_BOTTOM,],title:\"Synchronization\",id:\"synchronization\",}\n);\n$.__views[\"synchronization\"] && $.addTopLevelView($.__views[\"synchronization\"]);\n$.__views[\"__alloyId500\"] = Alloy.createController('centerNavBtns',{id:\"__alloyId500\",__parentSymbol:$.__views[\"synchronization\"],});\n$.__views[\"__alloyId500\"].setParent($.__views[\"synchronization\"]);\n$.__views[\"__alloyId502\"] = Ti.UI.createView(\n{layout:\"vertical\",height:Ti.UI.SIZE,id:\"__alloyId502\",}\n);\n$.__views[\"syncBtn\"] = Ti.UI.createButton(\n{font:{fontSize:20,fontWeight:\"bold\",},title:'Start sync',id:\"syncBtn\",}\n);\n$.__views[\"__alloyId502\"].add($.__views[\"syncBtn\"]);\n$.__views[\"lastSyncLbl\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,color:\"gray\",font:{fontSize:12,},id:\"lastSyncLbl\",}\n);\n$.__views[\"__alloyId502\"].add($.__views[\"lastSyncLbl\"]);\n$.__views[\"__alloyId505\"] = Ti.UI.createView(\n{backgroundColor:\"#efefef\",height:60,id:\"__alloyId505\",}\n);\n$.__views[\"__alloyId506\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,left:20,text:'Download iProductive data',id:\"__alloyId506\",}\n);\n$.__views[\"__alloyId505\"].add($.__views[\"__alloyId506\"]);\n$.__views[\"auditDownLoading\"] = Ti.UI.createActivityIndicator(\n{message:\"Loading ...\",color:\"black\",style:Titanium.UI.ActivityIndicatorStyle.DARK,id:\"auditDownLoading\",}\n);\n$.__views[\"__alloyId505\"].add($.__views[\"auditDownLoading\"]);\n$.__views[\"downloadAuditSwitch\"] = Ti.UI.createSwitch(\n{right:20,id:\"downloadAuditSwitch\",}\n);\n$.__views[\"__alloyId505\"].add($.__views[\"downloadAuditSwitch\"]);\nvar __alloyId507=[];$.__views[\"__alloyId508\"] = {properties:{height:70,title:\"Audit Templates\",subtitle:\"Audit checklists structures.\",id:\"__alloyId508\",},};__alloyId507.push($.__views[\"__alloyId508\"]);$.__views[\"__alloyId509\"] = {properties:{height:70,title:\"Audit Sections & Categories\",subtitle:\"Audit questions sections under each template\",id:\"__alloyId509\",},};__alloyId507.push($.__views[\"__alloyId509\"]);$.__views[\"__alloyId510\"] = {properties:{height:70,title:\"Audit Questions\",subtitle:\"Audit questions under each template\",id:\"__alloyId510\",},};__alloyId507.push($.__views[\"__alloyId510\"]);$.__views[\"__alloyId511\"] = {properties:{height:70,title:\"Stores\",id:\"__alloyId511\",},};__alloyId507.push($.__views[\"__alloyId511\"]);$.__views[\"downloadAuditSec\"] = Ti.UI.createListSection(\n{headerView:$.__views[\"__alloyId505\"],id:\"downloadAuditSec\",}\n);\n$.__views[\"downloadAuditSec\"].items=__alloyId507;var __alloyId512=[];__alloyId512.push($.__views[\"downloadAuditSec\"]);$.__views[\"__alloyId515\"] = Ti.UI.createView(\n{backgroundColor:\"#efefef\",height:60,id:\"__alloyId515\",}\n);\n$.__views[\"__alloyId516\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,left:20,text:'Download ScoreCard data',id:\"__alloyId516\",}\n);\n$.__views[\"__alloyId515\"].add($.__views[\"__alloyId516\"]);\n$.__views[\"scoreCardDownLoading\"] = Ti.UI.createActivityIndicator(\n{message:\"Loading ...\",color:\"black\",style:Titanium.UI.ActivityIndicatorStyle.DARK,id:\"scoreCardDownLoading\",}\n);\n$.__views[\"__alloyId515\"].add($.__views[\"scoreCardDownLoading\"]);\n$.__views[\"downloadScoreCardSwitch\"] = Ti.UI.createSwitch(\n{right:20,id:\"downloadScoreCardSwitch\",}\n);\n$.__views[\"__alloyId515\"].add($.__views[\"downloadScoreCardSwitch\"]);\nvar __alloyId517=[];$.__views[\"__alloyId518\"] = {properties:{height:70,title:\"ScoreCard Templates\",id:\"__alloyId518\",},};__alloyId517.push($.__views[\"__alloyId518\"]);$.__views[\"__alloyId519\"] = {properties:{height:70,title:\"ScoreCard Sections & Categories\",id:\"__alloyId519\",},};__alloyId517.push($.__views[\"__alloyId519\"]);$.__views[\"__alloyId520\"] = {properties:{height:70,title:\"ScoreCard Questions\",subtitle:\"Audit questions under each template\",id:\"__alloyId520\",},};__alloyId517.push($.__views[\"__alloyId520\"]);$.__views[\"__alloyId521\"] = {properties:{height:70,title:\"Employees\",id:\"__alloyId521\",},};__alloyId517.push($.__views[\"__alloyId521\"]);$.__views[\"downloadScoreCardSec\"] = Ti.UI.createListSection(\n{headerView:$.__views[\"__alloyId515\"],id:\"downloadScoreCardSec\",}\n);\n$.__views[\"downloadScoreCardSec\"].items=__alloyId517;__alloyId512.push($.__views[\"downloadScoreCardSec\"]);$.__views[\"__alloyId524\"] = Ti.UI.createView(\n{backgroundColor:\"#efefef\",height:60,id:\"__alloyId524\",}\n);\n$.__views[\"__alloyId525\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,left:20,text:'Upload iProductive & ScoreCard records',id:\"__alloyId525\",}\n);\n$.__views[\"__alloyId524\"].add($.__views[\"__alloyId525\"]);\n$.__views[\"uploadAuditSwitch\"] = Ti.UI.createSwitch(\n{right:20,id:\"uploadAuditSwitch\",}\n);\n$.__views[\"__alloyId524\"].add($.__views[\"uploadAuditSwitch\"]);\n$.__views[\"pb\"] = Ti.UI.createProgressBar(\n{width:Ti.UI.FILL,bottom:0,min:1,max:10,value:1,color:Alloy.CFG.borderColor,tintColor:Alloy.CFG.tintColor,message:\"Uploading ...\",font:{fontSize:14,fontWeight:\"bold\",},style:Titanium.UI.iOS.ProgressBarStyle.PLAIN,id:\"pb\",}\n);\n$.__views[\"__alloyId524\"].add($.__views[\"pb\"]);\n$.__views[\"uploadAuditSec\"] = Ti.UI.createListSection(\n{headerView:$.__views[\"__alloyId524\"],id:\"uploadAuditSec\",}\n);\nvar __alloyId529=Alloy.Collections['auditRecord'] || auditRecord;function __alloyId530(e) {   if (e && e.fromAdapter) { return; }   var opts = __alloyId530.opts || {};\tvar models = __alloyId529.models;\tvar len = models.length;var __alloyId522=[];\tfor (var i = 0; i < len; i++) {\t\tvar __alloyId526 = models[i];\t\t__alloyId526.__transform = uploadAuditTransform(__alloyId526);var __alloyId528 = {properties:{height:70,title:__alloyId526.__transform.AuditName,subtitle:__alloyId526.__transform.subTitle,auditRecordID:__alloyId526.__transform.id,storeCode:__alloyId526.__transform.storeCode,deptCode:__alloyId526.__transform.deptCode,AuditID:__alloyId526.__transform.AuditID,openDate:__alloyId526.__transform.openDate,submisiondDate:__alloyId526.__transform.submisiondDate,submittedBy:__alloyId526.__transform.submittedBy,online_id:__alloyId526.__transform.online_id,CompanyTypeID:__alloyId526.__transform.CompanyTypeID,DeptCode:__alloyId526.__transform.DeptCode,AuditDesc:__alloyId526.__transform.AuditDesc,Target:__alloyId526.__transform.Target,accessoryType:__alloyId526.__transform.accessoryType,type:__alloyId526.__transform.type,},};__alloyId522.push(__alloyId528);\t}opts.animation ? $.__views[\"uploadAuditSec\"].setItems(__alloyId522, opts.animation) : $.__views[\"uploadAuditSec\"].items = __alloyId522;};__alloyId529.on('fetch destroy change add remove reset',__alloyId530);__alloyId512.push($.__views[\"uploadAuditSec\"]);$.__views[\"__alloyId533\"] = Ti.UI.createView(\n{backgroundColor:\"#efefef\",height:60,id:\"__alloyId533\",}\n);\n$.__views[\"__alloyId534\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,left:20,text:'Download Tasks',id:\"__alloyId534\",}\n);\n$.__views[\"__alloyId533\"].add($.__views[\"__alloyId534\"]);\n$.__views[\"taskDownLoading\"] = Ti.UI.createActivityIndicator(\n{message:\"Loading ...\",color:\"black\",style:Titanium.UI.ActivityIndicatorStyle.DARK,id:\"taskDownLoading\",}\n);\n$.__views[\"__alloyId533\"].add($.__views[\"taskDownLoading\"]);\n$.__views[\"downloadTaskSwitch\"] = Ti.UI.createSwitch(\n{right:20,id:\"downloadTaskSwitch\",}\n);\n$.__views[\"__alloyId533\"].add($.__views[\"downloadTaskSwitch\"]);\nvar __alloyId535=[];$.__views[\"__alloyId536\"] = {properties:{height:70,title:\"Department\",id:\"__alloyId536\",},};__alloyId535.push($.__views[\"__alloyId536\"]);$.__views[\"__alloyId537\"] = {properties:{height:70,title:\"Tasks & Lists\",id:\"__alloyId537\",},};__alloyId535.push($.__views[\"__alloyId537\"]);$.__views[\"downloadTaskSec\"] = Ti.UI.createListSection(\n{headerView:$.__views[\"__alloyId533\"],id:\"downloadTaskSec\",}\n);\n$.__views[\"downloadTaskSec\"].items=__alloyId535;__alloyId512.push($.__views[\"downloadTaskSec\"]);$.__views[\"__alloyId540\"] = Ti.UI.createView(\n{backgroundColor:\"#efefef\",height:60,id:\"__alloyId540\",}\n);\n$.__views[\"__alloyId541\"] = Ti.UI.createLabel(\n{textAlign:Titanium.UI.TEXT_ALIGNMENT_LEFT,left:20,text:'Upload completed Tasks',id:\"__alloyId541\",}\n);\n$.__views[\"__alloyId540\"].add($.__views[\"__alloyId541\"]);\n$.__views[\"taskUpLoading\"] = Ti.UI.createActivityIndicator(\n{message:\"Loading ...\",color:\"black\",style:Titanium.UI.ActivityIndicatorStyle.DARK,id:\"taskUpLoading\",}\n);\n$.__views[\"__alloyId540\"].add($.__views[\"taskUpLoading\"]);\n$.__views[\"uploadTaskSwitch\"] = Ti.UI.createSwitch(\n{right:20,id:\"uploadTaskSwitch\",}\n);\n$.__views[\"__alloyId540\"].add($.__views[\"uploadTaskSwitch\"]);\n$.__views[\"uploadTasksSec\"] = Ti.UI.createListSection(\n{headerView:$.__views[\"__alloyId540\"],id:\"uploadTasksSec\",}\n);\nvar __alloyId545=Alloy.Collections['tasks_completed'] || tasks_completed;function __alloyId546(e) {   if (e && e.fromAdapter) { return; }   var opts = __alloyId546.opts || {};\tvar models = __alloyId545.models;\tvar len = models.length;var __alloyId538=[];\tfor (var i = 0; i < len; i++) {\t\tvar __alloyId542 = models[i];\t\t__alloyId542.__transform = uploadTasksTransform(__alloyId542);var __alloyId544 = {properties:{height:70,title:__alloyId542.__transform.title,TaskID:__alloyId542.__transform.TaskID,subtitle:__alloyId542.__transform.subTitle,},};__alloyId538.push(__alloyId544);\t}opts.animation ? $.__views[\"uploadTasksSec\"].setItems(__alloyId538, opts.animation) : $.__views[\"uploadTasksSec\"].items = __alloyId538;};__alloyId545.on('fetch destroy change add remove reset',__alloyId546);__alloyId512.push($.__views[\"uploadTasksSec\"]);$.__views[\"list\"] = Ti.UI.createListView(\n{defaultItemTemplate:Ti.UI.LIST_ITEM_TEMPLATE_SUBTITLE,sections:__alloyId512,headerView:$.__views[\"__alloyId502\"],id:\"list\",}\n);\n$.__views[\"synchronization\"].add($.__views[\"list\"]);\nvar __alloyId547 = function() {Alloy['Models']['user'].__transform = _.isFunction(Alloy['Models']['user'].transform) ? Alloy['Models']['user'].transform() : Alloy['Models']['user'].toJSON();$.downloadAuditSwitch.enabled = Alloy['Models']['user']['__transform']['EnableSyncBool'];$.downloadAuditSwitch.value = Alloy['Models']['user']['__transform']['ForceSyncBool'];$.downloadScoreCardSwitch.enabled = Alloy['Models']['user']['__transform']['EnableSyncBool'];$.downloadScoreCardSwitch.value = Alloy['Models']['user']['__transform']['ForceSyncBool'];$.uploadAuditSwitch.enabled = Alloy['Models']['user']['__transform']['EnableSyncBool'];$.uploadAuditSwitch.value = Alloy['Models']['user']['__transform']['ForceSyncBool'];$.downloadTaskSwitch.enabled = Alloy['Models']['user']['__transform']['EnableSyncBool'];$.downloadTaskSwitch.value = Alloy['Models']['user']['__transform']['ForceSyncBool'];$.uploadTaskSwitch.enabled = Alloy['Models']['user']['__transform']['EnableSyncBool'];$.uploadTaskSwitch.value = Alloy['Models']['user']['__transform']['ForceSyncBool'];};Alloy['Models']['user'].on('fetch change destroy',__alloyId547);exports.destroy = function () {__alloyId529 && __alloyId529.off('fetch destroy change add remove reset',__alloyId530);__alloyId545 && __alloyId545.off('fetch destroy change add remove reset',__alloyId546);Alloy['Models']['user'] && Alloy['Models']['user'].off('fetch change destroy',__alloyId547);};\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;\n","Ti.API.info('in sync LALALA');\n\nvar checknetwork = function checkNetwork(e) {\n  networkIsOnline = e.online;\n  networkType = e.networkType;\n  if (!networkIsOnline) {\n    //Ti.API.Info(\"user is offline\");\n    alert(\"Please Check your connection first and then Sync the data\");\n    $.syncBtn.enable = false;\n  } else {\n    //Ti.API.Info(\"you are online\");\n    $.syncBtn.enable = true;\n  }\n};\n// checknetwork(Ti.Network);\n\nTi.Network.addEventListener('change', checknetwork);\n\n// display completed audits\nfunction uploadAuditTransform(model) {\n  var transform = model.toJSON();\n  transform.subTitle = '[' + (transform.type == 1 ? 'SVM' : 'ScoreCard') + '] ' + transform.storeCode + \" / \" + transform.openDate;\n  transform.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_NONE;\n  transform.EnableSync = transform.EnableSync == 1;\n  //Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n  return transform;\n}\n\nfunction updateAuditRecord() {\n  try {\n    Alloy.Collections.auditRecord.fetch({\n      query: \"SELECT a.*, t.* FROM auditRecord a JOIN templates t ON t.AuditID = a.AuditID WHERE length(a.submisiondDate) > 3 AND a.online_id = ''\" });\n\n  } catch (e) {\n    //Ti.API.Info('error -> ' + JSON.stringify(e));\n  }\n\n  var last = Alloy.Globals.user.get('LastSyncDate');\n\n  $.lastSyncLbl.setText(moment(last).format('DD-MM-YYYY HH:mm'));\n}\n\nupdateAuditRecord();\n\n// update model data\nAlloy.Models.user.fetch({\n  id: Alloy.Globals.user.get('ldap_user') });\n\n\n// convert 1 and 0 to true & false\nAlloy.Models.user.on('change:EnableSync', function (e) {\n  Alloy.Models.user.set('EnableSyncBool', Alloy.Models.user.get('EnableSync') == 1);\n});\n\nAlloy.Models.user.on('change:ForceSync', function (e) {\n  Alloy.Models.user.set('ForceSyncBool', Alloy.Models.user.get('ForceSync') == 1);\n});\n\n// Show initial values for strings\nAlloy.Models.user.trigger('change:EnableSync');\nAlloy.Models.user.trigger('change:ForceSync');\n\n// display completed audits\nfunction uploadTasksTransform(model) {\n  var transform = model.toJSON();\n  switch (transform.TaskID) {\n    case 1:\n      transform.title = transform.TaskName + ' ( ' + transform.date + ' )';\n      break;\n    case 2:\n      transform.title = transform.TaskName + ' ( Week #' + transform.week + ' of ' + transform.year + ' )';\n      break;\n    case 3:\n      transform.title = transform.TaskName + ' ( Month #' + transform.date + ' of ' + transform.year + ' )';\n      break;\n    case 4:\n      transform.title = transform.TaskName + ' ( Semester #' + transform.yearHalf + ' of ' + transform.year + ' )';\n      break;\n    case 5:\n      transform.title = transform.TaskName + ' ( ' + transform.year + ' )';\n      break;}\n\n  transform.subTitle = (transform.completed || 0) + \" Completed tasks waiting to upload\";\n  return transform;\n}\n\n// update task list, use function to re-use it after update data\nfunction updateTaskLists(updateSideMenu) {\n  // Tasks only if logged in user allowed for tasks\n  if (Alloy.Models.user.get('HasTaskList') == 1) {\n    try {\n      Alloy.Collections.tasks_completed.fetch({\n        query: \"SELECT t.TaskID, t.TaskName, count(*) completed, min(CompletedDate) openDate, max(CompletedDate) closeDate, date(CompletedDate) date, strftime('%d', tc.CompletedDate) day, strftime('%W', tc.CompletedDate) week, strftime('%m', tc.CompletedDate) month, strftime('%Y', tc.CompletedDate) year, ((cast(strftime('%m', CompletedDate) as integer) + 2) / 3) quarter, ((((cast(strftime('%m', CompletedDate) as integer) + 2) / 3) > 2) + 1) yearHalf  \\\n\t\t\t\tFROM tasks t  \\\n\t\t\t\tJOIN tasks_completed tc ON t.TaskQuestionID = tc.TaskQuestionID  \\\n\t\t\t\tWHERE tc.taskRecord IS NULL  \\\n\t\t\t\tGROUP BY substr(CompletedDate, 0, 11), t.TaskID  \\\n\t\t\t\tORDER BY t.TaskOrder\" });\n\n    } catch (e) {\n      //Ti.API.Info('error -> ' + JSON.stringify(e));\n    }\n\n  }\n\n}\n\n// set sections\nvar sectionsArr = [];\n\n// Audit only if iPad\n//By Hassanisipad\n//if (Alloy.Globals.isiPad) {\nif (Alloy.Globals.isiPad || Alloy.Globals.isTablet) {\n  sectionsArr.push($.downloadAuditSec);\n  sectionsArr.push($.uploadAuditSec);\n  sectionsArr.push($.downloadScoreCardSec);\n}\n\n// Tasks only if has tasks\nif (Alloy.Models.user.get('HasTaskList') == 1) {\n  sectionsArr.push($.downloadTaskSec);\n  sectionsArr.push($.uploadTasksSec);\n}\n\n// set sections\n$.list.sections = sectionsArr;\nsectionsArr = null;\n\nupdateTaskLists();\n\nfunction cacheInformationForUser(methodName, responseText, responseXML, prams) {\n  //var parsedResponseXML = x2js.xml2json(responseXML);\n  var userName = Ti.App.Properties.getString('lastLoginUser', \"noUser\");\n  var usersData = Ti.App.Properties.getList(\"CachedDataByUser\", []);\n  if (usersData.filter(function (user) {\n    return user.user == Ti.App.Properties.getString('lastLoginUser', \"noUser\");\n  }).length) {\n    usersData.forEach(function (user, i) {\n      if (user.user == userName) {\n        if (user.methods.filter(function (method) {\n          return method.name == methodName;\n        }).length) {\n          usersData[i].methods.forEach(function (method, j) {\n            if (method.name == methodName) {\n              usersData[i].methods[j].self.responseText = responseText;\n              //usersData[i].methods[j].self.responseXML = parsedResponseXML;\n              usersData[i].methods[j].self.prams = prams;\n            }\n          });\n        } else {\n          usersData[i].methods.push({\n            name: methodName,\n            self: {\n              responseText: responseText,\n              //responseXML: parsedResponseXML,\n              prams: prams } });\n\n\n        }\n      }\n    });\n  } else {\n    usersData.push({\n      user: userName,\n      userData: {},\n      methods: [{\n        name: methodName,\n        self: {\n          responseText: responseText,\n          //responseXML: parsedResponseXML,\n          prams: prams } }] });\n\n\n\n\n  }\n\n  Ti.App.Properties.setList(\"CachedDataByUser\", usersData);\n}\n\nfunction getData(method, prams, onLoad, onError, multipart) {\n  if (method == \"CheckList_GetCheckList\") {\n    //Ti.API.Info('#### In getData function');\n  }\n  var url = Alloy.CFG.url + method;\n  var client = Ti.Network.createHTTPClient({\n    // function called when the response data is available\n    onload: function (e) {\n\n      Ti.API.info(\"***********************\\n\\nresponse:\" + this.responseText + \"\\n\\n***********************\");\n\n      //cacheInformationForUser(method, this.responseText, this.responseXML, prams);\n      onLoad(this);\n    },\n    // function called when an error occurs, including a timeout\n    onerror: function (e) {\n      if (onError) {\n        onError(e.error);\n      } else {\n        Ti.UI.createAlertDialog({\n          title: e.error,\n          message: \"Please check with your system administrator.\\n\\n\" + this.responseText + \"\\n\" + this.url,\n          buttonNames: ['OK'] }).\n        show();\n      }\n    },\n    timeout: 900000, // in milliseconds\n    validatesSecureCertificate: false });\n\n\n  client.prams = prams;\n  //Ti.API.Info('Paramet: ' + prams.toString());\n  //Ti.API.Info('url: ' + url);\n  // Prepare the connection..\n  client.open(\"POST\", url);\n  if (multipart) {\n    //client.setRequestHeader('enctype', 'multipart/form-data');\n    client.setRequestHeader('Content-Type', 'multipart/form-data');\n\n  } else {\n    client.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");\n  }\n\n  // add username\n  prams.Username = Alloy.Models.user.get('ldap_user');\n\n  // add userAccessCode\n  prams.userAccessCode = Alloy.CFG.userAccessCode;\n\n  // mirge params\n  var prams_str = [];\n  _.each(prams, function (a, b) {\n    prams_str.push(b + '=' + a);\n  });\n  //Ti.API.Info('url: ' + url);\n  //Ti.API.Info('param ' + prams_str);\n  //Ti.API.Info('param join ' + prams_str.join('&'));\n  Ti.API.info('***********************\\n\\nrequest:\\n\\nurl: ' + url + \"\\nparameters:\" + prams_str.join('&') + \"\\n\\n***********************\");\n  // Send the request.\n\n  client.send(prams_str.join('&'));\n\n}\n\nvar donwloadAuditData = function () {\n\n  $.auditDownLoading.show();\n\n  // some definations\n  var rowsIndex = {\n    'template': 0,\n    'sections': 1,\n    'questions': 2,\n    'stores': 3 };\n\n\n  // if (Alloy.Globals.HasLP) {\n  // stores\n  getData(\"LP_GetUserStores\", {}, function (This) {\n\n    // Data is returned from the blog, start parsing\n    var xml = This.responseXML.documentElement;\n    //Ti.API.Info('>>>>>> HERE TO SAVE STORES');\n    // blog posts are in nodes named \"item\"\n    var items = xml.getElementsByTagName(\"Table1\");\n\n    var db = Ti.Database.open('_alloy_');\n    _.each(['stores'], function (table) {\n      try {\n        db.execute(\"DELETE FROM \" + table);\n      } catch (err) {\n      }\n    });\n    db.close();\n\n    for (var i = 0; i < items.length; i++) {\n      var myModel = Alloy.createModel('stores', {\n        StoreCode: items.item(i).getElementsByTagName(\"StoreCode\").item(0).text,\n        StoreDesc: items.item(i).getElementsByTagName(\"StoreDesc\").item(0).text,\n        CountryCode: items.item(i).getElementsByTagName(\"CountryCode\").item(0).text,\n        CountryDesc: items.item(i).getElementsByTagName(\"CountryDesc\").item(0).text,\n        ZoneID: items.item(i).getElementsByTagName(\"ZoneID\").item(0).text,\n        ZoneDesc: items.item(i).getElementsByTagName(\"ZoneDesc\").item(0).text,\n        CompanyTypeID: items.item(i).getElementsByTagName(\"CompanyTypeID\").item(0).text,\n        CompanyTypeDesc: items.item(i).getElementsByTagName(\"CompanyTypeDesc\").item(0).text });\n\n\n      myModel.save();\n    }\n\n    var item = $.downloadAuditSec.getItemAt(rowsIndex.stores);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadAuditSec.updateItemAt(rowsIndex.stores, item);\n  });\n\n  getData(\"LP_GetAuditTemplates\", {}, function (This) {\n\n    // mark all templates as deleted\n    Alloy.Collections.templates.markAsDeleted(1);\n\n    // Data is returned from the blog, start parsing\n    var xml = This.responseXML.documentElement;\n\n    // blog posts are in nodes named \"item\"\n    var items = xml.getElementsByTagName(\"Table1\");\n    for (var i = 0; i < items.length; i++) {\n      var myModel = Alloy.createModel('templates', {\n        AuditID: items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n        CompanyTypeID: items.item(i).getElementsByTagName(\"CompanyTypeID\").item(0).text,\n        DeptCode: items.item(i).getElementsByTagName(\"DeptCode\").item(0).text,\n        AuditName: items.item(i).getElementsByTagName(\"AuditName\").item(0).text,\n        AuditDesc: items.item(i).getElementsByTagName(\"AuditDesc\").length > 0 ? items.item(i).getElementsByTagName(\"AuditDesc\").item(0).text : items.item(i).getElementsByTagName(\"AuditName\").item(0).text,\n        Show: items.item(i).getElementsByTagName(\"Show\").item(0).text,\n        Target: items.item(i).getElementsByTagName(\"Target\").item(0).text,\n        type: 1,\n        deleted: 0 });\n\n\n      myModel.save();\n\n      // update sections\n      getData(\"LP_GetAuditSections\", {\n        AuditID: myModel.get('AuditID') },\n      function (This) {\n\n        // Data is returned from the blog, start parsing\n        var xml = This.responseXML.documentElement;\n\n        // blog posts are in nodes named \"item\"\n        var items = xml.getElementsByTagName(\"Table1\");\n        for (var i = 0; i < items.length; i++) {\n          //Ti.API.Info(\"section Descr =\" + items.item(i).getElementsByTagName(\"SectionDesc\").item(0).text);\n          var secModel = Alloy.createModel('sections', {\n            FuckedID: items.item(i).getElementsByTagName(\"SectionID\").item(0).text + \"-\" + items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n            AuditID: items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n            SectionID: items.item(i).getElementsByTagName(\"SectionID\").item(0).text,\n            SectionDesc: items.item(i).getElementsByTagName(\"SectionDesc\").item(0).text,\n            SectionOrder: items.item(i).getElementsByTagName(\"SectionOrder\").item(0).text,\n            ParentID: items.item(i).getElementsByTagName(\"ParentID\").item(0).text,\n            RootID: items.item(i).getElementsByTagName(\"RootID\").item(0).text });\n\n\n          secModel.save();\n        }\n      });\n\n      //Ti.API.Info(\"myModel.get('AuditID')=\" + myModel.get('AuditID'));\n      // update qestions\n      getData(\"LP_GetAuditQuestions\", {\n        AuditID: myModel.get('AuditID') },\n      function (This) {\n\n        // Data is returned from the blog, start parsing\n        var xml = This.responseXML.documentElement;\n\n        // blog posts are in nodes named \"item\"\n        var items = xml.getElementsByTagName(\"Table1\");\n        for (var i = 0; i < items.length; i++) {\n          //Ti.API.Info(\"QuestionDesc=\" + items.item(i).getElementsByTagName(\"QuestionDesc\").item(0).text);\n          var QValue = 0;\n          if (items.item(i).getElementsByTagName(\"QValue\").item(0) != null) {\n            //Ti.API.Info(\"QValue= \" + items.item(i).getElementsByTagName(\"QValue\").item(0).text);\n            QValue = items.item(i).getElementsByTagName(\"QValue\").item(0).text;\n          } else {\n\n          } //Ti.API.Info(\"WTF QValue is null!\");\n          //Ti.API.Info(\"question: \" + items.item(i).getElementsByTagName(\"QuestionDesc\").item(0).text);\n          var secModel = Alloy.createModel('questions', {\n            QuestionID: items.item(i).getElementsByTagName(\"QuestionID\").item(0).text,\n            AuditID: This.prams.AuditID,\n            SectionID: items.item(i).getElementsByTagName(\"SectionID\").item(0).text,\n            ResponsibilityDesc: items.item(i).getElementsByTagName(\"ResponsibilityDesc\").item(0).text,\n            QuestionDesc: items.item(i).getElementsByTagName(\"QuestionDesc\").item(0).text,\n            QValue: QValue, //items.item(i).getElementsByTagName(\"QValue\").item(0).text,\n            QWeight: items.item(i).getElementsByTagName(\"QWeight\").item(0).text,\n            QuestionOrder: items.item(i).getElementsByTagName(\"QuestionOrder\").length > 0 ? items.item(i).getElementsByTagName(\"QuestionOrder\").item(0).text : 0,\n            CSA: items.item(i).getElementsByTagName(\"CSA\").item(0).text,\n            Show: items.item(i).getElementsByTagName(\"Show\").item(0).text ? 1 : 0 });\n\n\n          secModel.save();\n        }\n\n        $.auditDownLoading.hide();\n      });\n    }\n\n    var item = $.downloadAuditSec.getItemAt(rowsIndex.template);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadAuditSec.updateItemAt(rowsIndex.template, item);\n    var item = $.downloadAuditSec.getItemAt(rowsIndex.sections);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadAuditSec.updateItemAt(rowsIndex.sections, item);\n    var item = $.downloadAuditSec.getItemAt(rowsIndex.questions);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadAuditSec.updateItemAt(rowsIndex.questions, item);\n\n  });\n  // } else {\n  // stores\n  getData(\"SVM_GetUserStores\", {}, function (This) {\n\n    // Data is returned from the blog, start parsing\n    var xml = This.responseXML.documentElement;\n\n    // blog posts are in nodes named \"item\"\n    var items = xml.getElementsByTagName(\"Table1\");\n    for (var i = 0; i < items.length; i++) {\n      var myModel = Alloy.createModel('stores', {\n        StoreCode: items.item(i).getElementsByTagName(\"StoreCode\").item(0).text,\n        StoreDesc: items.item(i).getElementsByTagName(\"StoreDesc\").item(0).text,\n        CountryCode: items.item(i).getElementsByTagName(\"CountryCode\").item(0).text,\n        CountryDesc: items.item(i).getElementsByTagName(\"CountryDesc\").item(0).text,\n        ZoneID: items.item(i).getElementsByTagName(\"ZoneID\").item(0).text,\n        ZoneDesc: items.item(i).getElementsByTagName(\"ZoneDesc\").item(0).text,\n        CompanyTypeID: items.item(i).getElementsByTagName(\"CompanyTypeID\").item(0).text,\n        CompanyTypeDesc: items.item(i).getElementsByTagName(\"CompanyTypeDesc\").item(0).text });\n\n\n      myModel.save();\n    }\n    var item = $.downloadAuditSec.getItemAt(rowsIndex.stores);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadAuditSec.updateItemAt(rowsIndex.stores, item);\n  });\n\n  getData(\"SVM_GetAuditTemplates\", {}, function (This) {\n\n    // mark all templates as deleted\n    //Alloy.Collections.templates.markAsDeleted(1);\n\n    // Data is returned from the blog, start parsing\n    var xml = This.responseXML.documentElement;\n\n    // blog posts are in nodes named \"item\"\n    var items = xml.getElementsByTagName(\"Table1\");\n    for (var i = 0; i < items.length; i++) {\n      var myModel = Alloy.createModel('templates', {\n        AuditID: items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n        CompanyTypeID: items.item(i).getElementsByTagName(\"CompanyTypeID\").item(0).text,\n        DeptCode: items.item(i).getElementsByTagName(\"DeptCode\").item(0).text,\n        AuditName: items.item(i).getElementsByTagName(\"AuditName\").item(0).text,\n        AuditDesc: items.item(i).getElementsByTagName(\"AuditDesc\").length > 0 ? items.item(i).getElementsByTagName(\"AuditDesc\").item(0).text : items.item(i).getElementsByTagName(\"AuditName\").item(0).text,\n        Show: items.item(i).getElementsByTagName(\"Show\").item(0).text,\n        Target: items.item(i).getElementsByTagName(\"Target\").item(0).text,\n        type: 1,\n        deleted: 0 });\n\n\n      myModel.save();\n\n      // update sections\n      getData(\"SVM_GetAuditSections\", {\n        AuditID: myModel.get('AuditID') },\n      function (This) {\n\n        // Data is returned from the blog, start parsing\n        var xml = This.responseXML.documentElement;\n\n        // blog posts are in nodes named \"item\"\n        var items = xml.getElementsByTagName(\"Table1\");\n        for (var i = 0; i < items.length; i++) {\n          var secModel = Alloy.createModel('sections', {\n            FuckedID: items.item(i).getElementsByTagName(\"SectionID\").item(0).text + \"-\" + items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n            AuditID: items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n            SectionID: items.item(i).getElementsByTagName(\"SectionID\").item(0).text,\n            SectionDesc: items.item(i).getElementsByTagName(\"SectionDesc\").item(0).text,\n            SectionOrder: items.item(i).getElementsByTagName(\"SectionOrder\").item(0).text,\n            ParentID: items.item(i).getElementsByTagName(\"ParentID\").item(0).text,\n            RootID: items.item(i).getElementsByTagName(\"RootID\").item(0).text });\n\n\n          secModel.save();\n        }\n      });\n\n      // update qestions\n      getData(\"SVM_GetAuditQuestions\", {\n        AuditID: myModel.get('AuditID') },\n      function (This) {\n\n        // Data is returned from the blog, start parsing\n        var xml = This.responseXML.documentElement;\n\n        // blog posts are in nodes named \"item\"\n        var items = xml.getElementsByTagName(\"Table1\");\n        for (var i = 0; i < items.length; i++) {\n          var secModel = Alloy.createModel('questions', {\n            QuestionID: items.item(i).getElementsByTagName(\"QuestionID\").item(0).text,\n            AuditID: This.prams.AuditID,\n            SectionID: items.item(i).getElementsByTagName(\"SectionID\").item(0).text,\n            ResponsibilityDesc: items.item(i).getElementsByTagName(\"ResponsibilityDesc\").item(0).text,\n            QuestionDesc: items.item(i).getElementsByTagName(\"QuestionDesc\").item(0).text,\n            QValue: items.item(i).getElementsByTagName(\"QValue\").item(0).text,\n            QWeight: items.item(i).getElementsByTagName(\"QWeight\").item(0).text,\n            QuestionOrder: items.item(i).getElementsByTagName(\"QuestionOrder\").length > 0 ? items.item(i).getElementsByTagName(\"QuestionOrder\").item(0).text : 0,\n            CSA: items.item(i).getElementsByTagName(\"CSA\").item(0).text,\n            Show: parseInt(items.item(i).getElementsByTagName(\"Show\").item(0).text) });\n\n\n          secModel.save();\n        }\n\n        $.auditDownLoading.hide();\n      });\n    }\n\n    var item = $.downloadAuditSec.getItemAt(rowsIndex.template);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadAuditSec.updateItemAt(rowsIndex.template, item);\n    var item = $.downloadAuditSec.getItemAt(rowsIndex.sections);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadAuditSec.updateItemAt(rowsIndex.sections, item);\n    var item = $.downloadAuditSec.getItemAt(rowsIndex.questions);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadAuditSec.updateItemAt(rowsIndex.questions, item);\n\n  });\n  // }\n\n};\nvar uploadAuditData = function () {\n\n  if (Alloy.Collections.auditRecord.length == 0) {\n    return;\n  }\n\n  $.pb.max = Alloy.Collections.auditRecord.length;\n  $.pb.message = 'Uploading 1 of ' + Alloy.Collections.auditRecord.length;\n  $.pb.show();\n\n  // if (Alloy.Globals.HasLP) {\n  // get departments\n  getData(\"LP_GetUserDepts\", {}, function (This) {\n\n    // Data is returned from the blog, start parsing\n    var xml = This.responseXML.documentElement;\n\n    // items are in nodes named \"Table1\"\n    var items = xml.getElementsByTagName(\"Table1\");\n    //Ti.API.Info(\"line 462 \" + JSON.stringify(items));\n    if (items.item(0) == null) {\n      $.auditDownLoading.hide();\n      return;\n    }\n    var department = items.item(0).getElementsByTagName(\"DeptCode\").item(0).text;\n\n    if (!department) {\n      return;\n    }\n\n    var x2jsMod = require('xml2json');\n    var x2js = new x2jsMod();\n    Alloy.Collections.auditRecord.each(function (model, collectionIndex) {\n\n      $.pb.value = collectionIndex + 1;\n      $.pb.message = 'Uploading ' + $.pb.value + ' of ' + Alloy.Collections.auditRecord.length;\n\n      var data = model.toJSON();\n\n      if (data.type == 1) {// SVM\n        var CryptoJS = require('tripledes').CryptoJS;\n        var key = \"THYgfTYgGhfg7dxDFGH65jhkgXZSDFr84fjdX\";\n        var useHashing = true;\n        if (useHashing) {\n          key = CryptoJS.MD5(key).toString();\n          var k1 = key.substring(0, 16);\n          key = key + k1;\n        }\n\n        var options = {\n          mode: CryptoJS.mode.ECB,\n          padding: CryptoJS.pad.Pkcs7 };\n\n\n        var keyHex = CryptoJS.enc.Hex.parse(key);\n\n        //$.hexadecimal.text = 'hexadecimal key\\n' + keyHex.toString();\n\n        var textWordArray = CryptoJS.enc.Utf8.parse(data.comment);\n        var encrypted = CryptoJS.TripleDES.encrypt(textWordArray, keyHex, options);\n        var base64String = encrypted.toString();\n        var CommentEncrypt = base64String;\n\n        getData(\"LP_CreateAuditRecord\", {\n          storeCode: data.storeCode,\n          DeptCode: department,\n          auditID: data.auditID,\n          openDate: data.openDate,\n          submisiondDate: data.submisiondDate,\n          submittedBy: data.submittedBy,\n          comment: CommentEncrypt },\n        function (This) {\n\n          var online_id = parseInt(This.responseText.match(\">([0-9]+)<\")[1]);\n          if (!online_id) {\n            Ti.UI.createAlertDialog({\n              title: 'Error',\n              message: \"Can't get CreateAuditRecord, please check with your system administrator.\\n\\n\" + This.responseText,\n              buttonNames: ['OK'] }).\n            show();\n            return;\n          }\n\n          model.set('accessoryType', Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK);\n          model.save({\n            online_id: online_id\n            //deptCode : department\n          });\n\n          var answers = {\n            online_id: online_id,\n            answers: [] };\n\n          var numOfImages = 0;\n          var noImages = true;\n          var answersCollaction = Alloy.createCollection('answers');\n          var wait = false;\n          answersCollaction.on('fetch', function () {\n            answersCollaction.each(function (mymodel) {\n              var myAns = mymodel.toJSON();\n              while (wait) {\n                //Ti.API.Info(\"waiting=-=-=-=-=-=-=-=-=-=-=-=\");\n              };\n              // use saved data fo async errors\n              myAns.AuditRecordID = answers.online_id;\n\n              // upload images\n              if (myAns.Image != null) {\n                numOfImages++;\n                noImages = false;\n                // //Ti.API.Info('images uploading : ' + myAns.Image.getSize());\n                ////Ti.API.Info('images uploading 1 : ' + myAns.Image1.getSize());\n                ////Ti.API.Info('myAns.Image is not null '+myAns.Image.toString());\n                // //Ti.API.Info('myAns.Image native path '+myAns.Image.nativePath);\n                //Ti.API.Info('myAns.Image size ' + myAns.Image.size);\n                ////Ti.API.Info('myAns.Image is null ');\n                ////Ti.API.Info('BlobText image1 = '+Ti.Utils.base64encode(myAns.Image).toString());\n                ////Ti.API.Info('BlobText = '+Ti.Utils.base64encode(myAns.Image1).toString());\n                // var file = Ti.Filesystem.getFile(myAns.Image);\n                // var f = Ti.Filesystem.getFile(Ti.Filesystem.applicationDataDirectory, myAns.Image);\n                ////Ti.API.Info('image...................... '+f.exists());\n                // var blob = f.read();\n                // //Ti.API.Info('images uploading : ' + blob.getSize());\n\n                //var imageFile = Titanium.Filesystem.getFile(myAns.Image).read();\n                var encoded = Ti.Utils.base64encode(myAns.Image);\n                var encoded1 = '';\n                if (myAns.Image1 != null) {\n                  encoded1 = Ti.Utils.base64encode(myAns.Image1);\n                }\n                // wait = true;\n                Alloy.Globals.loading.show(\"please wait...\");\n                getData('LP_InsertImages', {\n                  auditRecordID: answers.online_id,\n                  questionID: myAns.QuestionID,\n                  image: 'WebService_LP_InsertImages' + encoded.toString(),\n                  image1: 'WebService_LP_InsertImages' + encoded1.toString() },\n                function (This) {\n                  wait = false;\n                  //Ti.API.Info('numOfImages was ' + numOfImages);\n                  numOfImages--;\n                  //Ti.API.Info('numOfImages now is ' + numOfImages);\n                  if (numOfImages == 0) {\n                    getData(\"LP_ImageSyncCompleted\", {\n                      auditRecordID: answers.online_id },\n                    function (This) {\n                      //Ti.API.Info(\"numOfImages is zero\");\n                    });\n\n                    Alloy.Globals.loading.hide();\n\n                  }\n                  // getData(\"SVM_ImageSyncCompleted\",\n                  // {\n                  // auditRecordID : answers.online_id\n                  // },\n                  // function(e)\n                  // {\n                  // //Ti.API.Info (\"real Image Upload completed!!!!!!!!!!!!!!!!!\");\n                  // });\n                  //\n                }, function (e) {\n                  alert('Uploaded image error\\nAuditRecordID : ' + answers.online_id + '\\nquestionID : ' + myAns.QuestionID + '\\n' + e);\n                }, false);\n              }\n              delete myAns.id;\n              delete myAns.uploaded_date;\n              delete myAns.Image;\n              delete myAns.Image1;\n\n              answers.answers.push(myAns);\n              mymodel.save({\n                uploaded_date: Alloy.Globals.getFullDate() });\n\n            });\n          });\n\n          ////end function\n          try\n          {\n            answersCollaction.fetch({\n              query: \"SELECT * from answers WHERE AuditRecordID = \" + model.get('id') });\n\n          } catch (e) {\n            //Ti.API.Info('error -> ' + JSON.stringify(e));\n          }\n\n          var xmlStr = x2js.json2xml_str({\n            root: {\n              //AuditRecordID : online_id,\n              answer: answers.answers } });\n\n\n\n          //xmlStr = xmlStr.replace (\"'\",\"        \");\n          //Ti.API.Info(xmlStr);\n          var CryptoJS = require('tripledes').CryptoJS;\n          var key = \"THYgfTYgGhfg7dxDFGH65jhkgXZSDFr84fjdX\";\n          var useHashing = true;\n\n          if (useHashing) {\n            key = CryptoJS.MD5(key).toString();\n            var k1 = key.substring(0, 16);\n            key = key + k1;\n          }\n\n          var options = {\n            mode: CryptoJS.mode.ECB,\n            padding: CryptoJS.pad.Pkcs7 };\n\n\n          var keyHex = CryptoJS.enc.Hex.parse(key);\n\n          //$.hexadecimal.text = 'hexadecimal key\\n' + keyHex.toString();\n\n          var textWordArray = CryptoJS.enc.Utf8.parse(xmlStr);\n          var encrypted = CryptoJS.TripleDES.encrypt(textWordArray, keyHex, options);\n          var base64String = encrypted.toString();\n\n          xmlStr = base64String;\n\n          $.pb.message = 'Uploading ' + $.pb.value + ' of ' + Alloy.Collections.auditRecord.length + \"\\n\" + 'please wait uploading images.';\n          getData(\"LP_InsertAnswers\", {\n            xml: xmlStr },\n          function (This) {\n            //Ti.API.Info(xmlStr);\n            //Ti.API.Info(\"before real insert Upload completed!!!!!!!!!!!!!!!!!\");\n            getData(\"LP_SyncCompleted\", {\n              auditRecordID: answers.online_id },\n            function (This) {\n              //Ti.API.Info(\"real insert Upload completed!!!!!!!!!!!!!!!!!\");\n              if (noImages) {\n                //Ti.API.Info(\"No IMAGES WTF\");\n\n                getData(\"LP_ImageSyncCompleted\", {\n                  auditRecordID: answers.online_id },\n                function (This) {\n                  //Ti.API.Info(\"numOfImages already was zero\");\n                });\n\n              }\n            });\n\n            //Kassem guessing the upload is done\n          }, function (e) {\n            alert('XML upload error\\nAuditRecordID : ' + answers.online_id + '\\n' + e);\n          });\n\n          ////*********Insert Images after Answers\n          /*\n          //var answersCollaction = Alloy.createCollection('answers');\n          // answersCollaction.on('fetch', function() {\n          answersCollaction.each(function(mymodel) {\n          var myAns = mymodel.toJSON();\n          \t// use saved data fo async errors\n          myAns.AuditRecordID = answers.online_id;\n          \tif (myAns.Image != null) {\n          // //Ti.API.Info('images uploading : ' + myAns.Image.getSize());\n          ////Ti.API.Info('images uploading 1 : ' + myAns.Image1.getSize());\n          ////Ti.API.Info('myAns.Image is not null '+myAns.Image.toString());\n          // //Ti.API.Info('myAns.Image native path '+myAns.Image.nativePath);\n          //Ti.API.Info('myAns.Image size '+myAns.Image.size);\n          ////Ti.API.Info('myAns.Image is null ');\n          ////Ti.API.Info('BlobText image1 = '+Ti.Utils.base64encode(myAns.Image).toString());\n          ////Ti.API.Info('BlobText = '+Ti.Utils.base64encode(myAns.Image1).toString());\n          // var file = Ti.Filesystem.getFile(myAns.Image);\n          // var f = Ti.Filesystem.getFile(Ti.Filesystem.applicationDataDirectory, myAns.Image);\n          ////Ti.API.Info('image...................... '+f.exists());\n          // var blob = f.read();\n          // //Ti.API.Info('images uploading : ' + blob.getSize());\n          \t//var imageFile = Titanium.Filesystem.getFile(myAns.Image).read();\n          var encoded = Ti.Utils.base64encode(myAns.Image);\n          var encoded1 ='';\n          if (myAns.Image1 != null)\n          {\n          encoded1=Ti.Utils.base64encode(myAns.Image1);\n          }\n          getData('SVM_InsertImages', {\n          auditRecordID : answers.online_id,\n          questionID : myAns.QuestionID,\n          image : 'WebService_SVM_InsertImages'+encoded.toString(),\n          image1 : 'WebService_SVM_InsertImages'+encoded1.toString()\n          }, function(e) {\n          //Ti.API.Info('images uploaded : Image1' );\n          //Ti.API.Info('images uploaded 1 : Image 2' );\n          }, function(e) {\n          alert('Uploaded image error\\nAuditRecordID : ' + answers.online_id + '\\nquestionID : ' + myAns.QuestionID + '\\n' + e);\n          }, false);\n          }\n          \tdelete myAns.id;\n          delete myAns.uploaded_date;\n          delete myAns.Image;\n          delete myAns.Image1;\n          answers.answers.push(myAns);\n          mymodel.save({\n          uploaded_date : Alloy.Globals.getFullDate()\n          });\n          });\n          });  ///end function\n          // End Move\n          */\n\n\n\n\n        });\n      } else {// ScoreCard\n        model.set('accessoryType', Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK);\n        model.save({\n          online_id: -1,\n          deptCode: department });\n\n\n        var answers = {\n          auditID: data.auditID,\n          storeCode: data.storeCode,\n          PositionID: data.PositionID,\n          UserID: data.UserID,\n          answers: [] };\n\n\n        var answersCollaction = Alloy.createCollection('answers');\n        answersCollaction.on('fetch', function () {\n          answersCollaction.each(function (mymodel) {\n            var myAns = mymodel.toJSON();\n            answers.answers.push({\n              StoreCode: answers.storeCode,\n              PositionID: answers.PositionID,\n              UserID: answers.UserID,\n              AuditID: answers.auditID,\n              QuestionID: myAns.QuestionID,\n              AnswerID: myAns.AnswerID,\n              \"Date\": myAns.AnswerDate,\n              AnswerValue: myAns.Answervalue,\n              AuditCreationAuditor: Alloy.Globals.user.get('ldap_user'),\n              Auditor: Alloy.Globals.user.get('ldap_user') });\n\n\n            mymodel.save({\n              uploaded_date: Alloy.Globals.getFullDate() });\n\n          });\n        });\n        try {\n          answersCollaction.fetch({\n            query: \"SELECT * from answers WHERE AuditRecordID = \" + model.get('id') });\n\n        } catch (e) {\n          //Ti.API.Info('error -> ' + JSON.stringify(e));\n        }\n\n        var xmlStr = x2js.json2xml_str({\n          root: {\n            answer: answers.answers } });\n\n\n        getData(\"ScoreCard_InsertEmployeeAnswers\", {\n          xml: xmlStr },\n        function (This) {\n          //Ti.API.Info(xmlStr);\n\n        });\n      }\n\n      $.pb.message = Alloy.Collections.auditRecord.length + ' audits uploaded.';\n      setTimeout(function () {\n        $.pb.hide();\n      }, 5000);\n\n    });\n  });\n  // } else {\n  // get departments\n  getData(\"SVM_GetUserDepts\", {}, function (This) {\n\n    // Data is returned from the blog, start parsing\n    var xml = This.responseXML.documentElement;\n\n    // items are in nodes named \"Table1\"\n    var items = xml.getElementsByTagName(\"Table1\");\n    //Ti.API.Info(\"line 810\");\n\n    if (items.item(0) == null) {\n      $.auditDownLoading.hide();\n      return;\n    }\n    var department = items.item(0).getElementsByTagName(\"DeptCode\").item(0).text;\n\n    if (!department) {\n      return;\n    }\n\n    var x2jsMod = require('xml2json');\n    var x2js = new x2jsMod();\n    Alloy.Collections.auditRecord.each(function (model, collectionIndex) {\n\n      $.pb.value = collectionIndex + 1;\n      $.pb.message = 'Uploading ' + $.pb.value + ' of ' + Alloy.Collections.auditRecord.length;\n\n      var data = model.toJSON();\n\n      if (data.type == 1) {// SVM\n        var CryptoJS = require('tripledes').CryptoJS;\n        var key = \"THYgfTYgGhfg7dxDFGH65jhkgXZSDFr84fjdX\";\n        var useHashing = true;\n        if (useHashing) {\n          key = CryptoJS.MD5(key).toString();\n          var k1 = key.substring(0, 16);\n          key = key + k1;\n        }\n\n        var options = {\n          mode: CryptoJS.mode.ECB,\n          padding: CryptoJS.pad.Pkcs7 };\n\n\n        var keyHex = CryptoJS.enc.Hex.parse(key);\n\n        //$.hexadecimal.text = 'hexadecimal key\\n' + keyHex.toString();\n\n        var textWordArray = CryptoJS.enc.Utf8.parse(data.comment);\n        var encrypted = CryptoJS.TripleDES.encrypt(textWordArray, keyHex, options);\n        var base64String = encrypted.toString();\n        var CommentEncrypt = base64String;\n\n        getData(\"SVM_CreateAuditRecord\", {\n          storeCode: data.storeCode,\n          DeptCode: department,\n          auditID: data.auditID,\n          openDate: data.openDate,\n          submisiondDate: data.submisiondDate,\n          submittedBy: data.submittedBy,\n          comment: CommentEncrypt },\n        function (This) {\n\n          var online_id = parseInt(This.responseText.match(\">([0-9]+)<\")[1]);\n          if (!online_id) {\n            Ti.UI.createAlertDialog({\n              title: 'Error',\n              message: \"Can't get CreateAuditRecord, please check with your system administrator.\\n\\n\" + This.responseText,\n              buttonNames: ['OK'] }).\n            show();\n            return;\n          }\n\n          model.set('accessoryType', Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK);\n          model.save({\n            online_id: online_id\n            //deptCode : department\n          });\n\n          var answers = {\n            online_id: online_id,\n            answers: [] };\n\n          var numOfImages = 0;\n          var noImages = true;\n          var answersCollaction = Alloy.createCollection('answers');\n          var isUploading = false;\n          answersCollaction.on('fetch', function () {\n            answersCollaction.each(function (mymodel) {\n              var myAns = mymodel.toJSON();\n              while (isUploading) {\n                //Ti.API.Info(\"isuploading-=-=-=-=-=-=-=-=-=-=-=-=-\");\n              };\n              // use saved data fo async errors\n              myAns.AuditRecordID = answers.online_id;\n\n              // upload images\n              if (myAns.Image != null) {\n                numOfImages++;\n                noImages = false;\n                // //Ti.API.Info('images uploading : ' + myAns.Image.getSize());\n                ////Ti.API.Info('images uploading 1 : ' + myAns.Image1.getSize());\n                ////Ti.API.Info('myAns.Image is not null '+myAns.Image.toString());\n                // //Ti.API.Info('myAns.Image native path '+myAns.Image.nativePath);\n                //Ti.API.Info('myAns.Image size ' + myAns.Image.size);\n                ////Ti.API.Info('myAns.Image is null ');\n                ////Ti.API.Info('BlobText image1 = '+Ti.Utils.base64encode(myAns.Image).toString());\n                ////Ti.API.Info('BlobText = '+Ti.Utils.base64encode(myAns.Image1).toString());\n                // var file = Ti.Filesystem.getFile(myAns.Image);\n                // var f = Ti.Filesystem.getFile(Ti.Filesystem.applicationDataDirectory, myAns.Image);\n                ////Ti.API.Info('image...................... '+f.exists());\n                // var blob = f.read();\n                // //Ti.API.Info('images uploading : ' + blob.getSize());\n\n                //var imageFile = Titanium.Filesystem.getFile(myAns.Image).read();\n                var encoded = Ti.Utils.base64encode(myAns.Image);\n                var encoded1 = '';\n                if (myAns.Image1 != null) {\n                  encoded1 = Ti.Utils.base64encode(myAns.Image1);\n                }\n                // isUploading = true;\n                Alloy.Globals.loading.show(\"please wait...\");\n                getData('SVM_InsertImages', {\n                  auditRecordID: answers.online_id,\n                  questionID: myAns.QuestionID,\n                  image: 'WebService_SVM_InsertImages' + encoded.toString(),\n                  image1: 'WebService_SVM_InsertImages' + encoded1.toString() },\n                function (This) {\n                  isUploading = false;\n                  //Ti.API.Info('numOfImages was ' + numOfImages);\n                  numOfImages--;\n                  //Ti.API.Info('numOfImages now is ' + numOfImages);\n                  if (numOfImages == 0) {\n                    getData(\"SVM_ImageSyncCompleted\", {\n                      auditRecordID: answers.online_id },\n                    function (This) {\n                      //Ti.API.Info(\"numOfImages is zero\");\n                    });\n                    Alloy.Globals.loading.hide();\n\n                  }\n                  // getData(\"SVM_ImageSyncCompleted\",\n                  // {\n                  // auditRecordID : answers.online_id\n                  // },\n                  // function(e)\n                  // {\n                  // //Ti.API.Info (\"real Image Upload completed!!!!!!!!!!!!!!!!!\");\n                  // });\n                  //\n                }, function (e) {\n                  alert('Uploaded image error\\nAuditRecordID : ' + answers.online_id + '\\nquestionID : ' + myAns.QuestionID + '\\n' + e);\n                }, false);\n              }\n              delete myAns.id;\n              delete myAns.uploaded_date;\n              delete myAns.Image;\n              delete myAns.Image1;\n\n              answers.answers.push(myAns);\n              mymodel.save({\n                uploaded_date: Alloy.Globals.getFullDate() });\n\n            });\n          });\n\n          ////end function\n          try\n          {\n            answersCollaction.fetch({\n              query: \"SELECT * from answers WHERE AuditRecordID = \" + model.get('id') });\n\n          } catch (e) {\n            //Ti.API.Info('error -> ' + JSON.stringify(e));\n          }\n\n          var xmlStr = x2js.json2xml_str({\n            root: {\n              //AuditRecordID : online_id,\n              answer: answers.answers } });\n\n\n\n          //xmlStr = xmlStr.replace (\"'\",\"        \");\n          //Ti.API.Info(xmlStr);\n          var CryptoJS = require('tripledes').CryptoJS;\n          var key = \"THYgfTYgGhfg7dxDFGH65jhkgXZSDFr84fjdX\";\n          var useHashing = true;\n\n          if (useHashing) {\n            key = CryptoJS.MD5(key).toString();\n            var k1 = key.substring(0, 16);\n            key = key + k1;\n          }\n\n          var options = {\n            mode: CryptoJS.mode.ECB,\n            padding: CryptoJS.pad.Pkcs7 };\n\n\n          var keyHex = CryptoJS.enc.Hex.parse(key);\n\n          //$.hexadecimal.text = 'hexadecimal key\\n' + keyHex.toString();\n\n          var textWordArray = CryptoJS.enc.Utf8.parse(xmlStr);\n          var encrypted = CryptoJS.TripleDES.encrypt(textWordArray, keyHex, options);\n          var base64String = encrypted.toString();\n\n          xmlStr = base64String;\n\n          $.pb.message = 'Uploading ' + $.pb.value + ' of ' + Alloy.Collections.auditRecord.length + \"\\n\" + 'please wait uploading images.';\n          getData(\"SVM_InsertAnswers\", {\n            xml: xmlStr },\n          function (This) {\n            //Ti.API.Info(xmlStr);\n            //Ti.API.Info(\"before real insert Upload completed!!!!!!!!!!!!!!!!!\");\n            getData(\"SVM_SyncCompleted\", {\n              auditRecordID: answers.online_id },\n            function (This) {\n              //Ti.API.Info(\"real insert Upload completed!!!!!!!!!!!!!!!!!\");\n              if (noImages) {\n                //Ti.API.Info(\"No IMAGES WTF\");\n\n                getData(\"SVM_ImageSyncCompleted\", {\n                  auditRecordID: answers.online_id },\n                function (This) {\n                  //Ti.API.Info(\"numOfImages already was zero\");\n                });\n\n              }\n            });\n\n            //Kassem guessing the upload is done\n          }, function (e) {\n            alert('XML upload error\\nAuditRecordID : ' + answers.online_id + '\\n' + e);\n          });\n\n          ////*********Insert Images after Answers\n          /*\n          //var answersCollaction = Alloy.createCollection('answers');\n          // answersCollaction.on('fetch', function() {\n          answersCollaction.each(function(mymodel) {\n          var myAns = mymodel.toJSON();\n          \t// use saved data fo async errors\n          myAns.AuditRecordID = answers.online_id;\n          \tif (myAns.Image != null) {\n          // //Ti.API.Info('images uploading : ' + myAns.Image.getSize());\n          ////Ti.API.Info('images uploading 1 : ' + myAns.Image1.getSize());\n          ////Ti.API.Info('myAns.Image is not null '+myAns.Image.toString());\n          // //Ti.API.Info('myAns.Image native path '+myAns.Image.nativePath);\n          //Ti.API.Info('myAns.Image size '+myAns.Image.size);\n          ////Ti.API.Info('myAns.Image is null ');\n          ////Ti.API.Info('BlobText image1 = '+Ti.Utils.base64encode(myAns.Image).toString());\n          ////Ti.API.Info('BlobText = '+Ti.Utils.base64encode(myAns.Image1).toString());\n          // var file = Ti.Filesystem.getFile(myAns.Image);\n          // var f = Ti.Filesystem.getFile(Ti.Filesystem.applicationDataDirectory, myAns.Image);\n          ////Ti.API.Info('image...................... '+f.exists());\n          // var blob = f.read();\n          // //Ti.API.Info('images uploading : ' + blob.getSize());\n          \t//var imageFile = Titanium.Filesystem.getFile(myAns.Image).read();\n          var encoded = Ti.Utils.base64encode(myAns.Image);\n          var encoded1 ='';\n          if (myAns.Image1 != null)\n          {\n          encoded1=Ti.Utils.base64encode(myAns.Image1);\n          }\n          getData('SVM_InsertImages', {\n          auditRecordID : answers.online_id,\n          questionID : myAns.QuestionID,\n          image : 'WebService_SVM_InsertImages'+encoded.toString(),\n          image1 : 'WebService_SVM_InsertImages'+encoded1.toString()\n          }, function(e) {\n          //Ti.API.Info('images uploaded : Image1' );\n          //Ti.API.Info('images uploaded 1 : Image 2' );\n          }, function(e) {\n          alert('Uploaded image error\\nAuditRecordID : ' + answers.online_id + '\\nquestionID : ' + myAns.QuestionID + '\\n' + e);\n          }, false);\n          }\n          \tdelete myAns.id;\n          delete myAns.uploaded_date;\n          delete myAns.Image;\n          delete myAns.Image1;\n          answers.answers.push(myAns);\n          mymodel.save({\n          uploaded_date : Alloy.Globals.getFullDate()\n          });\n          });\n          });  ///end function\n          // End Move\n          */\n\n\n\n\n        });\n      } else {// ScoreCard\n        model.set('accessoryType', Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK);\n        model.save({\n          online_id: -1,\n          deptCode: department });\n\n\n        var answers = {\n          auditID: data.auditID,\n          storeCode: data.storeCode,\n          PositionID: data.PositionID,\n          UserID: data.UserID,\n          answers: [] };\n\n\n        var answersCollaction = Alloy.createCollection('answers');\n        answersCollaction.on('fetch', function () {\n          answersCollaction.each(function (mymodel) {\n            var myAns = mymodel.toJSON();\n            answers.answers.push({\n              StoreCode: answers.storeCode,\n              PositionID: answers.PositionID,\n              UserID: answers.UserID,\n              AuditID: answers.auditID,\n              QuestionID: myAns.QuestionID,\n              AnswerID: myAns.AnswerID,\n              \"Date\": myAns.AnswerDate,\n              AnswerValue: myAns.Answervalue,\n              AuditCreationAuditor: Alloy.Globals.user.get('ldap_user'),\n              Auditor: Alloy.Globals.user.get('ldap_user') });\n\n\n            mymodel.save({\n              uploaded_date: Alloy.Globals.getFullDate() });\n\n          });\n        });\n        try {\n          answersCollaction.fetch({\n            query: \"SELECT * from answers WHERE AuditRecordID = \" + model.get('id') });\n\n        } catch (e) {\n          //Ti.API.Info('error -> ' + JSON.stringify(e));\n        }\n\n        var xmlStr = x2js.json2xml_str({\n          root: {\n            answer: answers.answers } });\n\n\n        getData(\"ScoreCard_InsertEmployeeAnswers\", {\n          xml: xmlStr },\n        function (This) {\n          //Ti.API.Info(xmlStr);\n\n        });\n      }\n\n      $.pb.message = Alloy.Collections.auditRecord.length + ' audits uploaded.';\n      setTimeout(function () {\n        $.pb.hide();\n      }, 5000);\n\n    });\n  });\n  // }\n\n};\n\nvar getQuestionAnswers = function (AuditID, StoreCode) {\n\n  var auditRecord = Alloy.createCollection('auditRecord');\n  auditRecord.on('fetch', function () {\n    var rows = [];\n    auditRecord.each(function (model) {\n      //Ti.API.Info(\"auditRecord ====\" + JSON.stringify(model));\n      var myData = model.toJSON();\n      //Ti.API.Info(\"storeCode ====\" + myData.storeCode);\n      //Ti.API.Info(\"auditID ====\" + myData.auditID);\n      //Ti.API.Info(\"id ====\" + myData.id);\n      var myData = model.toJSON();\n      var AuditID = myData.auditID;\n      var StoreCode = myData.storeCode;\n      getData(\"LP_GetAuditHistory\", {\n        AuditID: AuditID,\n        StoreCode: StoreCode },\n      function (This) {\n        //Ti.API.Info(\"the returned storeCode ====\" + myData.storeCode);\n        //Ti.API.Info(\"the returned auditID ====\" + myData.auditID);\n\n        var del = Alloy.createCollection('auditHistory');\n        del.delete(myData.storeCode, myData.auditID);\n\n        // Data is returned from the blog, start parsing\n        var xml = This.responseXML.documentElement;\n        //Ti.API.Info('\\n\\n\\n\\n################# response: ' + This.responseText + \"\\n\\n\\n\\n\\n\");\n        // blog posts are in nodes named \"item\"\n        var items = xml.getElementsByTagName(\"Table1\");\n        for (var i = 0; i < items.length; i++) {\n          var myModel = Alloy.createModel('auditHistory', {\n            StoreCode: myData.storeCode,\n            AuditRecordID: myData.id,\n            AuditID: items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n            QuestionID: items.item(i).getElementsByTagName(\"QuestionID\").item(0).text,\n            Previous_AuditDate: items.item(i).getElementsByTagName(\"Previous_AuditDate\").item(0).text,\n            Previous_Answer: items.item(i).getElementsByTagName(\"Previous_Answer\").item(0) != null ? items.item(i).getElementsByTagName(\"Previous_Answer\").item(0).text : '',\n            Previous_AnswerValue: items.item(i).getElementsByTagName(\"Previous_AnswerValue\").item(0).text,\n            Previous_AnswerDate: items.item(i).getElementsByTagName(\"Previous_AnswerDate\").item(0).text,\n            Previous_Comment: items.item(i).getElementsByTagName(\"Previous_Comment\").item(0).text });\n\n\n          myModel.save(null, {\n            success: function (model, response) {\n              //Ti.API.Info(\"success->\" + response);\n            },\n            error: function (model, response) {\n              //Ti.API.Info(\"error->\" + response);\n            } });\n\n        }\n\n        //Ti.API.Info(\"kassem==>\" + JSON.stringify(xml));\n\n      });\n    });\n  });\n  try {\n    auditRecord.fetch({\n      query: 'SELECT DISTINCT id, auditID, storeCode from auditRecord' //\"SELECT * FROM auditRecord t1 INNER JOIN auditRecord t2 WHERE t1.auditID <> t2.auditID AND t1.storeCode <> t2.storeCode\"\n    });\n  } catch (e) {\n    //Ti.API.Info('error -> ' + JSON.stringify(e));\n  }\n\n};\n\nvar donwloadScoreCardData = function () {\n\n  $.scoreCardDownLoading.show();\n\n  // some definations\n  var rowsIndex = {\n    'template': 0,\n    'sections': 1,\n    'questions': 2,\n    'employees': 3 };\n\n\n  // stores\n  getData(\"ScoreCard_GetEmployees\", {}, function (This) {\n\n    var del = Alloy.createCollection('employees');\n    del.deleteAllRecords();\n    // Data is returned from the blog, start parsing\n    var xml = This.responseXML.documentElement;\n\n    // blog posts are in nodes named \"item\"\n    var items = xml.getElementsByTagName(\"Table1\");\n    for (var i = 0; i < items.length; i++) {\n      var myModel = Alloy.createModel('employees', {\n        StoreCode: items.item(i).getElementsByTagName(\"StoreCode\").item(0).text,\n        DeptCode: items.item(i).getElementsByTagName(\"DeptCode\").item(0).text,\n        PositionID: items.item(i).getElementsByTagName(\"PositionID\").item(0).text,\n        AuditID: items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n        UserID: items.item(i).getElementsByTagName(\"UserID\").item(0).text,\n        Name: items.item(i).getElementsByTagName(\"Name\").item(0).text,\n        EmployeeNo: items.item(i).getElementsByTagName(\"EmployeeNo\").item(0).text });\n\n\n      myModel.save();\n    }\n    var item = $.downloadScoreCardSec.getItemAt(rowsIndex.employees);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadScoreCardSec.updateItemAt(rowsIndex.employees, item);\n  });\n\n  getData(\"ScoreCard_GetAuditTemplates\", {}, function (This) {\n\n    // mark all templates as deleted\n    Alloy.Collections.templates.markAsDeleted(2);\n\n    // Data is returned from the blog, start parsing\n    var xml = This.responseXML.documentElement;\n\n    // blog posts are in nodes named \"item\"\n    var items = xml.getElementsByTagName(\"Table1\");\n    for (var i = 0; i < items.length; i++) {\n      var myModel = Alloy.createModel('templates', {\n        AuditID: items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n        CompanyTypeID: items.item(i).getElementsByTagName(\"CompanyTypeID\").item(0).text,\n        DeptCode: items.item(i).getElementsByTagName(\"DeptCode\").item(0).text,\n        AuditName: items.item(i).getElementsByTagName(\"AuditName\").item(0).text,\n        Show: items.item(i).getElementsByTagName(\"Show\").item(0).text,\n        type: 2,\n        deleted: 0 });\n\n\n      myModel.save();\n\n      // update sections\n      getData(\"ScoreCard_GetAuditSections\", {\n        AuditID: myModel.get('AuditID') },\n      function (This) {\n\n        // Data is returned from the blog, start parsing\n        var xml = This.responseXML.documentElement;\n\n        // blog posts are in nodes named \"item\"\n        var items = xml.getElementsByTagName(\"Table1\");\n        for (var i = 0; i < items.length; i++) {\n\n          var secModel = Alloy.createModel('sections', {\n            FuckedID: items.item(i).getElementsByTagName(\"SectionID\").item(0).text + \"-\" + items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n            AuditID: items.item(i).getElementsByTagName(\"AuditID\").item(0).text,\n            SectionID: items.item(i).getElementsByTagName(\"SectionID\").item(0).text,\n            SectionDesc: items.item(i).getElementsByTagName(\"SectionDesc\").item(0).text,\n            SectionOrder: items.item(i).getElementsByTagName(\"SectionOrder\").item(0).text,\n            ParentID: items.item(i).getElementsByTagName(\"ParentID\").item(0).text,\n            RootID: items.item(i).getElementsByTagName(\"RootID\").item(0).text });\n\n\n          secModel.save();\n        }\n      });\n\n      // update qestions\n      getData(\"ScoreCard_GetAuditQuestionsAnswers\", {\n        AuditID: myModel.get('AuditID') },\n      function (This) {\n\n        // Data is returned from the blog, start parsing\n        var xml = This.responseXML.documentElement;\n\n        // blog posts are in nodes named \"item\"\n        var items = xml.getElementsByTagName(\"Question\");\n        for (var i = 0; i < items.length; i++) {\n          var questionModel = Alloy.createModel('questions_scorecard', {\n            QuestionID: items.item(i).getElementsByTagName(\"QuestionID\").item(0).text,\n            AuditID: This.prams.AuditID,\n            SectionID: items.item(i).getElementsByTagName(\"SectionID\").item(0).text,\n            QuestionDesc: items.item(i).getElementsByTagName(\"QuestionDesc\").item(0).text });\n\n\n          questionModel.save();\n\n          // Data is returned from the blog, start parsing\n          var answersItems = items.item(i).getElementsByTagName(\"Answer\");\n          for (var i1 = 0; i1 < answersItems.length; i1++) {\n            var answerModel = Alloy.createModel('questions_answers_scorecard', {\n              AnswerID: answersItems.item(i1).getElementsByTagName(\"AnswerID\").item(0).text,\n              QuestionID: items.item(i).getElementsByTagName(\"QuestionID\").item(0).text,\n              Answer: answersItems.item(i1).getElementsByTagName(\"AnswerDesc\").item(0).text,\n              Value: answersItems.item(i1).getElementsByTagName(\"Value\").item(0).text,\n              Weight: answersItems.item(i1).getElementsByTagName(\"Weight\").item(0).text });\n\n\n            answerModel.save();\n          }\n        }\n\n      });\n      $.scoreCardDownLoading.hide();\n    }\n\n    var item = $.downloadScoreCardSec.getItemAt(rowsIndex.template);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadScoreCardSec.updateItemAt(rowsIndex.template, item);\n    var item = $.downloadScoreCardSec.getItemAt(rowsIndex.sections);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadScoreCardSec.updateItemAt(rowsIndex.sections, item);\n    var item = $.downloadScoreCardSec.getItemAt(rowsIndex.questions);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadScoreCardSec.updateItemAt(rowsIndex.questions, item);\n\n  });\n\n};\n\nvar donwloadTaskData = function () {\n\n  $.taskDownLoading.show();\n\n  // some definations\n  var rowsIndex = {\n    'department': 0,\n    'tasks': 1 };\n\n\n  // get departments\n  getData(\"CheckList_GetUserDepts\", {}, function (This) {\n\n    // mark department as completed\n    var item = $.downloadTaskSec.getItemAt(rowsIndex.department);\n    item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n    $.downloadTaskSec.updateItemAt(rowsIndex.department, item);\n\n    // Data is returned from the blog, start parsing\n    var xml = This.responseXML.documentElement;\n\n    // items are in nodes named \"Table1\"\n    var items = xml.getElementsByTagName(\"Table1\");\n    //Ti.API.Info(\"line 1379\");\n    var department = items.item(0).getElementsByTagName(\"DeptCode\").item(0).text;\n\n    if (!department) {\n      return;\n    }\n\n    getData(\"CheckList_GetCheckList\", {\n      DeptCode: department },\n    function (This) {\n      //Ti.API.Info('#### Success called');\n      // mark department as completed\n      var item = $.downloadTaskSec.getItemAt(rowsIndex.tasks);\n      item.properties.accessoryType = Ti.UI.LIST_ACCESSORY_TYPE_CHECKMARK;\n      $.downloadTaskSec.updateItemAt(rowsIndex.tasks, item);\n\n      // Data is returned from the blog, start parsing\n      var xml = This.responseXML.documentElement;\n\n      // items are in nodes named \"Table1\"\n      var items = xml.getElementsByTagName(\"Table1\");\n\n      for (var i = 0; i < items.length; i++) {\n        var myModel = Alloy.createModel('tasks', {\n          TaskQuestionID: items.item(i).getElementsByTagName(\"TaskQuestionID\").item(0).text,\n          DeptCode: items.item(i).getElementsByTagName(\"DeptCode\").item(0).text,\n          TaskID: items.item(i).getElementsByTagName(\"TaskID\").item(0).text,\n          TaskName: items.item(i).getElementsByTagName(\"TaskName\").item(0).text,\n          SectionID: items.item(i).getElementsByTagName(\"SectionID\").item(0).text,\n          SectionDesc: items.item(i).getElementsByTagName(\"SectionDesc\").item(0).text,\n          QuestionDesc: items.item(i).getElementsByTagName(\"QuestionDesc\").item(0).text,\n          PriorityCode: items.item(i).getElementsByTagName(\"PriorityCode\").item(0).text,\n          timeFrom: items.item(i).getElementsByTagName(\"From\").length > 0 ? parseInt(items.item(i).getElementsByTagName(\"From\").item(0).text.replace('PT', '')) : 0,\n          timeTo: items.item(i).getElementsByTagName(\"To\").length > 0 ? parseInt(items.item(i).getElementsByTagName(\"To\").item(0).text.replace('PT', '')) : 24,\n          TaskOrder: items.item(i).getElementsByTagName(\"TaskOrder\").item(0).text,\n          SectionOrder: items.item(i).getElementsByTagName(\"SectionOrder\").item(0).text,\n          //QuestionOrder : items.item(i).getElementsByTagName(\"QuestionOrder\").item(0).text,\n          QuestionOrder: items.item(i).getElementsByTagName(\"QuestionOrder\").length > 0 ? items.item(i).getElementsByTagName(\"QuestionOrder\").item(0).text : 0 });\n\n\n        myModel.save();\n      }\n\n      $.taskDownLoading.hide();\n\n      // update task list\n      try {\n        Alloy.Collections.tasks.fetch({\n          query: \"SELECT TaskName, TaskID FROM tasks GROUP BY TaskID ORDER BY TaskOrder\" });\n\n      } catch (e) {\n        //Ti.API.Info('error -> ' + JSON.stringify(e));\n      }\n\n    });\n  });\n\n};\n\nvar uploadTaskData = function () {\n\n  if (Alloy.Collections.tasks_completed.models.length == 0) {\n    return;\n  }\n\n  $.taskUpLoading.show();\n\n  // get un-uploaded tasks, group them into lists\n  var lists = {};\n\n  var tasksCompletedCollaction = Alloy.createCollection('tasks_completed');\n  tasksCompletedCollaction.on('fetch', function () {\n    tasksCompletedCollaction.each(function (mymodel) {\n      var data = mymodel.toJSON();\n      var CompletedDate = data.CompletedDate;\n\n      // list type to get key\n      if (data.TaskID == 1) {\n        var key = data.day;\n      } else if (data.TaskID == 2) {\n        var key = data.week;\n      } else if (data.TaskID == 3) {\n        var key = data.month;\n      } else if (data.TaskID == 4) {\n        var key = data.year + '-h' + (data.quarter > 2 ? 2 : 1);\n      } else if (data.TaskID == 5) {\n        var key = data.year;\n      } else {\n        var key = data.year + '-q' + data.quarter;\n      }\n\n      if (!lists.hasOwnProperty(key)) {\n        lists[key] = {\n          ids: [],\n          TaskID: data.TaskID,\n          openDate: data.CompletedDate };\n\n      }\n\n      lists[key].ids.push(data.id);\n      lists[key].closeDate = data.CompletedDate;\n    });\n  });\n  try {\n    tasksCompletedCollaction.fetch({\n      query: \"SELECT tc.id, t.TaskID, t.TaskName, count(*) completed, tc.CompletedDate, strftime('%Y-%m-%d', tc.CompletedDate) day, strftime('%Y-w%W', tc.CompletedDate) week, strftime('%Y-m%m', tc.CompletedDate) month, strftime('%Y', tc.CompletedDate) year, (cast(strftime('%m', tc.CompletedDate) as integer) + 2) / 3 as quarter FROM tasks t JOIN tasks_completed tc ON t.TaskQuestionID = tc.TaskQuestionID WHERE tc.taskRecord IS NULL GROUP BY tc.id ORDER BY t.TaskID, tc.CompletedDate\" });\n\n  } catch (e) {\n\n  } //Ti.API.Info('error -> ' + JSON.stringify(e));\n\n  // get departments\n  getData(\"CheckList_GetUserDepts\", {}, function (This) {\n\n    // Data is returned from the blog, start parsing\n    var xml = This.responseXML.documentElement;\n\n    // items are in nodes named \"Table1\"\n    var items = xml.getElementsByTagName(\"Table1\");\n    //Ti.API.Info(\"line 1489\");\n    var department = items.item(0).getElementsByTagName(\"DeptCode\").item(0).text;\n\n    if (!department) {\n      return;\n    }\n\n    var x2jsMod = require('xml2json');\n    var x2js = new x2jsMod();\n\n    _.each(lists, function (data, key) {\n\n      getData(\"CheckList_CreateCheckListRecord\", {\n        deptCode: department,\n        taskID: data.TaskID,\n        username: Alloy.Models.user.get('Username'),\n        openDate: data.openDate,\n        closeDate: data.closeDate,\n        status: '1' },\n      function (This) {\n\n        var online_id = parseInt(This.responseText.match(\">([0-9]+)<\")[1]);\n        if (!online_id) {\n          Ti.UI.createAlertDialog({\n            title: 'Error',\n            message: \"Can't get CreateCheckListRecord, please check with your system administrator.\\n\\n\" + This.responseText,\n            buttonNames: ['OK'] }).\n          show();\n          return;\n        }\n\n        var xmlStr = x2js.json2xml_str({\n          root: {\n            CheckListRecord: online_id,\n            completedTasks: {\n              ids: data.ids } } });\n\n\n\n        getData(\"CheckList_InsertAnswers\", {\n          xml: xmlStr },\n        function (This) {\n          //Ti.API.Info(xmlStr);\n          tasksCompletedCollaction.markCompleted(data.ids, online_id);\n        });\n\n      });\n      $.auditUpLoading.hide();\n\n    });\n\n  });\n};\n\n$.syncBtn.addEventListener('click', function () {\n  //Ti.API.Info(\"hello\");\n  //setTimeout(checkKassem, 1000);\n  getQuestionAnswers();\n\n  // Donwload audit data\n  //By Hassanisipad\n  //Ti.API.Info($.downloadAuditSwitch.value == true);\n  //Ti.API.Info(Alloy.Globals.isiPad);\n\n  if ($.downloadAuditSwitch.value == true && (Alloy.Globals.isiPad || Alloy.Globals.isTablet)) {\n    //if ($.downloadAuditSwitch.value == 'true') {\n    donwloadAuditData();\n  }\n\n  // Upload audits & answers\n  //By hassanisipad\n  if ($.uploadAuditSwitch.value == true && (Alloy.Globals.isiPad || Alloy.Globals.isTablet)) {\n    //if ($.uploadAuditSwitch.value == 'true') {\n    updateAuditRecord();\n    uploadAuditData();\n  }\n\n  // Donwload ScoreCard data\n  //By Hassanisipad\n  if ($.downloadScoreCardSwitch.value == true && (Alloy.Globals.isiPad || Alloy.Globals.isTablet)) {\n    //if ($.downloadScoreCardSwitch.value == 'true') {\n    donwloadScoreCardData();\n  }\n\n  // Donwload tasks data\n  if ($.downloadTaskSwitch.value == true && Alloy.Models.user.get('HasTaskList') == 1) {\n    //alert(\"will download data\");\n    donwloadTaskData();\n  }\n\n  // Donwload tasks data\n  if ($.uploadTaskSwitch.value == true && Alloy.Models.user.get('HasTaskList') == 1) {\n    updateTaskLists();\n    uploadTaskData();\n  }\n\n  var today = new Date();\n  Alloy.Globals.user.set('LastSyncDate', today);\n  Alloy.Globals.user.save();\n  var last = Alloy.Globals.user.get('LastSyncDate');\n\n  $.lastSyncLbl.setText(moment(last).format('DD-MM-YYYY HH:mm'));\n});\n\n$.synchronization.addEventListener(\"close\", function () {\n  $.destroy();\n});"]}