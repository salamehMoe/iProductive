{"version":3,"sources":["template.js","app/widgets/nl.fokkezb.drawer/controllers/widget.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClrZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"/Users/exsalameh/Desktop/iProductive-2/Resources/iphone/alloy/widgets/nl.fokkezb.drawer/controllers/widget.js","sourceRoot":"/Users/exsalameh/Desktop/iProductive-2","sourcesContent":["var Alloy = require('/alloy'),\n\tBackbone = Alloy.Backbone,\n\t_ = Alloy._;\n\n\nfunction WPATH(s) {\n\tvar index = s.lastIndexOf('/');\n\tvar path = index === -1 ?\n\t\t'nl.fokkezb.drawer/' + s :\n\t\ts.substring(0, index) + '/nl.fokkezb.drawer/' + s.substring(index + 1);\n\n\treturn path.indexOf('/') !== 0 ? '/' + path : path;\n}\n\nfunction __processArg(obj, key) {\n\tvar arg = null;\n\tif (obj) {\n\t\targ = obj[key] || null;\n\t}\n\treturn arg;\n}\n\nfunction Controller() {\n\tvar Widget = new (require('/alloy/widget'))('nl.fokkezb.drawer');this.__widgetId='nl.fokkezb.drawer';\n\trequire('/alloy/controllers/' + 'BaseController').apply(this, Array.prototype.slice.call(arguments));\n\tthis.__controllerPath = 'widget';\n\tthis.args = arguments[0] || {};\n\n\tif (arguments[0]) {\n\t\tvar __parentSymbol = __processArg(arguments[0], '__parentSymbol');\n\t\tvar $model = __processArg(arguments[0], '$model');\n\t\tvar __itemTemplate = __processArg(arguments[0], '__itemTemplate');\n\t}\n\tvar $ = this;\n\tvar exports = {};\n\tvar __defers = {};\n\n\t// Generated code that must be executed before all UI and/or\n\t// controller code. One example is all model and collection\n\t// declarations from markup.\n\t\n\n\t// Generated UI code\n\texports.destroy = function () {};\n\n\t// make all IDed elements in $.__views available right on the $ in a\n\t// controller's internal code. Externally the IDed elements will\n\t// be accessed with getView().\n\t_.extend($, $.__views);\n\n\t// Controller code directly from the developer's controller file\n\t__MAPMARKER_CONTROLLER_CODE__\n\n\t// Generated code that must be executed after all UI and\n\t// controller code. One example deferred event handlers whose\n\t// functions are not defined until after the controller code\n\t// is executed.\n\t\n\n\t// Extend the $ instance with all functions and properties\n\t// defined on the exports object.\n\t_.extend($, exports);\n}\n\nmodule.exports = Controller;\n","var args = arguments[0] || {};\n\nvar mod;\n\nif (OS_ANDROID && args.drawerLayout) {\n  // if Titanium SDK is 6.2 use the drawer included in the Titanium API, not use external module\n  if (parseFloat(Ti.version) < 6.2) {// use module\n    mod = 'com.tripvi.drawerlayout';\n    $.module = require(mod);\n  }\n} else {\n  mod = 'dk.napp.drawer';\n  $.module = require(mod);\n}\n\n// convert children to args based on role\nif (args.children) {\n\n  _.each(args.children, function (child) {\n\n    // fix: https://jira.appcelerator.org/browse/TC-3583\n    if (!child) {\n      return;\n    }\n\n    var role = child.role;\n\n    if (mod !== 'dk.napp.drawer') {\n      role = role.replace('Window', 'View');\n    }\n\n    if (role) {\n      args[role] = child;\n    }\n  });\n}\n\nvar consts;\n\nif (mod === 'dk.napp.drawer') {\n  consts = [\n  'closeDrawerGestureMode',\n  'openDrawerGestureMode',\n  'centerHiddenInteractionMode',\n  'animationMode',\n  'statusBarStyle'];\n\n} else {\n  consts = ['drawerLockMode'];\n}\n\n// convert strings to constants\n_.each(consts, function (arg) {\n\n  if (args[arg] && typeof args[arg] === 'string') {\n    args[arg] = $.module[args[arg]];\n  }\n});\n\n//transform properties\nif (mod === 'dk.napp.drawer') {\n  if (_.has(args, 'drawerIndicatorEnabled')) {\n    args.hamburgerIcon = args.drawerIndicatorEnabled;\n    delete args.drawerIndicatorEnabled;\n  }\n  if (_.has(args, 'drawerArrowIcon')) {\n    args.arrowAnimation = args.drawerArrowIcon;\n    delete args.drawerArrowIcon;\n  }\n  if (_.has(args, 'drawerArrowIconColor')) {\n    args.hamburgerIconColor = args.drawerArrowIconColor;\n    delete args.drawerArrowIconColor;\n  }\n} else {\n  if (_.has(args, 'hamburgerIcon')) {\n    args.drawerIndicatorEnabled = args.hamburgerIcon;\n    delete args.hamburgerIcon;\n  }\n  if (_.has(args, 'arrowAnimation')) {\n    args.drawerArrowIcon = args.arrowAnimation;\n    delete args.arrowAnimation;\n  }\n  if (_.has(args, 'hamburgerIconColor')) {\n    args.drawerArrowIconColor = args.hamburgerIconColor;\n    delete args.hamburgerIconColor;\n  }\n}\n\n// delete irrelevant args\ndelete args.id;\ndelete args.__parentSymbol;\ndelete args.children;\n\nif (mod === 'dk.napp.drawer') {\n\n  _.extend(args, args.window || {});\n\n  // create actual drawer\n  $.instance = $.module.createDrawer(_.omit(args, 'window'));\n\n  $.window = $.instance;\n  $.addTopLevelView($.instance);\n\n} else {\n  // create actual drawer\n  if (parseFloat(Ti.version) < 6.2) {// use module\n    $.instance = $.module.createDrawer(_.omit(args, 'window'));\n  } else {// use Titanium API\n    $.instance = Ti.UI.Android.createDrawerLayout(_.omit(args, 'window'));\n  }\n\n  $.window = Ti.UI.createWindow(_.extend(_.pick(args, [\"orientationModes\", \"exitOnClose\", \"backgroundColor\", \"theme\"]), args.window || {}));\n  $.window.add($.instance);\n\n  $.addTopLevelView($.window);\n}\n\nif (OS_ANDROID) {\n  $.window.addEventListener('open', function (e) {\n    var actionBar = (mod === 'dk.napp.drawer' ? this : e.source).getActivity().getActionBar();\n\n    if (actionBar) {\n      actionBar.setDisplayHomeAsUp(true);\n      actionBar.setOnHomeIconItemSelected(function () {\n        if ($.isRightWindowOpen()) {\n          return $.closeRightWindow();\n        }\n        $.toggleLeftWindow();\n      });\n    }\n  });\n}\n\nvar props;\n\nif (mod === 'dk.napp.drawer') {\n  props = [\n  'centerWindow',\n  'leftWindow',\n  'rightWindow',\n  'closeDrawerGestureMode',\n  'openDrawerGestureMode',\n  'leftDrawerWidth',\n  'rightDrawerWidth',\n  'orientationModes',\n  'centerHiddenInteractionMode',\n  'animationMode',\n  'animationVelocity',\n  'showShadow',\n  'shadowWidth',\n  'shouldStretchDrawer',\n  'fading',\n  'parallaxAmount',\n  'statusBarStyle',\n  'hamburgerIcon',\n  'hamburgerIconColor',\n  'arrowAnimation'];\n\n} else {\n\n  if (parseFloat(Ti.version) < 6.2) {// use module\n    props = [\n    'leftView',\n    'rightView',\n    'centerView',\n    'isLeftDrawerOpen',\n    'isLeftDrawerVisible',\n    'isRightDrawerOpen',\n    'isRightDrawerVisible',\n    'leftDrawerWidth',\n    'rightDrawerWidth',\n    'drawerIndicatorEnabled',\n    'drawerIndicatorImage',\n    'drawerLockMode',\n    'drawerArrowIcon',\n    'drawerArrowIconColor'];\n\n  } else {// use native drawer provided on Titanium SDK 6.2\n    props = [\n    'leftView',\n    'rightView',\n    'centerView',\n    'isLeftOpen',\n    'isLeftVisible',\n    'isRightOpen',\n    'isRightVisible',\n    'leftWidth',\n    'rightWidth',\n    'drawerIndicatorEnabled',\n    'drawerLockMode',\n    'toolbarEnabled'];\n\n  }\n}\n\n// expose properties, setters and getters\n_.each(props, function (key) {\n  var cc = key[0].toUpperCase() + key.substring(1);\n\n  var get = $['get' + cc] || ($['get' + cc] = function () {\n    return $.instance[key];\n  });\n  var set = $['set' + cc] || ($['set' + cc] = function (val) {\n\n    if (consts.indexOf(key) !== -1 && typeof val === 'string') {\n      val = $.module[val];\n    }\n\n    $.instance[key] = val;\n  });\n\n  Object.defineProperty($, key, {\n    get: get,\n    set: set });\n\n});\n\nif (mod === 'dk.napp.drawer') {\n\n  $.closeLeftWindow = function () {\n    if ($.instance.isLeftWindowOpen()) {\n      return $.instance.toggleLeftWindow();\n    }\n  };\n\n  $.closeRightWindow = function () {\n    if ($.instance.isRightWindowOpen()) {\n      return $.instance.toggleRightWindow();\n    }\n  };\n\n  $.openLeftWindow = function () {\n    if (!$.instance.isLeftWindowOpen()) {\n      return $.instance.toggleLeftWindow();\n    }\n  };\n\n  $.openRightWindow = function () {\n    if (!$.instance.isRightWindowOpen()) {\n      return $.instance.toggleRightWindow();\n    }\n  };\n\n  $.replaceCenterView = function (view) {\n    return $.instance.setCenterView(view);\n  };\n\n  $.leftView = $.leftWindow;\n  $.setLeftView = $.setLeftWindow;\n  $.getLeftView = $.getLeftWindow;\n\n  $.centerView = $.centerWindow;\n  $.setCenterView = $.setCenterWindow;\n  $.getCenterView = $.getCenterWindow;\n\n  $.rightView = $.rightWindow;\n  $.setRightView = $.setRightWindow;\n  $.getRightView = $.getRightWindow;\n\n  $.drawerIndicatorEnabled = $.hamburgerIcon;\n  $.setDrawerIndicatorEnabled = $.setHamburgerIcon;\n  $.getDrawerIndicatorEnabled = $.getHamburgerIcon;\n\n  $.drawerArrowIcon = $.arrowAnimation;\n  $.setDrawerArrowIcon = $.setArrowAnimation;\n  $.getDrawerArrowIcon = $.getArrowAnimation;\n\n  $.drawerArrowIconColor = $.hamburgerIconColor;\n  $.setDrawerArrowIconColor = $.setHamburgerIconColor;\n  $.getDrawerArrowIconColor = $.getHamburgerIconColor;\n\n} else {\n\n  $.open = function (params) {\n    return $.window.open(params);\n  };\n\n  $.close = function (params) {\n    return $.window.close(params);\n  };\n\n  $.isAnyWindowOpen = function () {\n    return $.instance.getIsLeftDrawerOpen() || $.instance.getIsRightDrawerOpen();\n  };\n\n  $.isLeftWindowOpen = function () {\n    return $.instance.getIsLeftDrawerOpen();\n  };\n\n  $.isRightWindowOpen = function () {\n    return $.instance.getIsRightDrawerOpen();\n  };\n\n  // the Titanium drawer API names differs from the external module API names\n  // so we need to overwrite and create new functions to map to the right methods \n  if (parseFloat(Ti.version) >= 6.2) {\n    // overwrite functions to map to the correct names\n    $.isAnyWindowOpen = function () {\n      return $.instance.isLeftOpen || $.instance.isRightOpen;\n    };\n\n    $.isLeftWindowOpen = function () {\n      return $.instance.isLeftOpen;\n    };\n\n    $.isRightWindowOpen = function () {\n      return $.instance.isRightOpen;\n    };\n\n    // create new functions to map to the correct function names\n    $.toggleLeftWindow = function () {\n      return $.instance.toggleLeft();\n    };\n\n    $.openLeftWindow = function () {\n      return $.instance.openLeft();\n    };\n\n    $.closeLeftWindow = function () {\n      return $.instance.closeLeft();\n    };\n\n    $.toggleRightWindow = function () {\n      return $.instance.toggleRight();\n    };\n\n    $.openRightWindow = function () {\n      return $.instance.openRight();\n    };\n\n    $.closeRightWindow = function () {\n      return $.instance.closeRight();\n    };\n  }\n\n  $.leftWindow = $.leftView;\n  $.setLeftWindow = $.setLeftView;\n  $.getLeftWindow = $.getLeftView;\n\n  $.centerWindow = $.centerView;\n  $.setCenterWindow = $.setCenterView;\n  $.getCenterWindow = $.getCenterView;\n\n  $.rightWindow = $.rightView;\n  $.setRightWindow = $.setRightView;\n  $.getRightWindow = $.getRightView;\n\n  $.hamburgerIcon = $.drawerIndicatorEnabled;\n  $.setHamburgerIcon = $.setDrawerIndicatorEnabled;\n  $.getHamburgerIcon = $.getDrawerIndicatorEnabled;\n\n  $.arrowAnimation = $.drawerArrowIcon;\n  $.setArrowAnimation = $.setDrawerArrowIcon;\n  $.getArrowAnimation = $.getDrawerArrowIcon;\n\n  $.hamburgerIconColor = $.drawerArrowIconColor;\n  $.setHamburgerIconColor = $.setDrawerArrowIconColor;\n  $.getHamburgerIconColor = $.getDrawerArrowIconColor;\n}\n\n// events\n$.on = function (event, callback, context) {\n  if (mod !== 'dk.napp.drawer' && (event === 'open' || event === 'close' || event === 'focus' || event === 'androidback')) {\n    return $.window.addEventListener(event, callback);\n  }\n  return $.instance.addEventListener(translateEvent(event), callback);\n};\n\n$.off = function (event, callback, context) {\n  if (mod !== 'dk.napp.drawer' && (event === 'open' || event === 'close' || event === 'focus' || event === 'androidback')) {\n    return $.window.addEventListener(event, callback);\n  }\n  return $.instance.removeEventListener(translateEvent(event), callback);\n};\n\n$.trigger = function (event, args) {\n  return $.instance.fireEvent(translateEvent(event), args);\n};\n\n$.addEventListener = $.on;\n$.removeEventListener = $.off;\n$.fireEvent = $.trigger;\n\nvar methods;\n\nif (mod === 'dk.napp.drawer') {\n  methods = [\n  'toggleLeftWindow',\n  'toggleRightWindow',\n  'bounceLeftWindow',\n  'bounceRightWindow',\n  'isAnyWindowOpen',\n  'isLeftWindowOpen',\n  'isRightWindowOpen',\n  'open',\n  'close'];\n\n} else {\n  if (parseFloat(Ti.version) < 6.2) {// use module\n    methods = [\n    'replaceCenterView',\n    'toggleLeftWindow',\n    'openLeftWindow',\n    'closeLeftWindow',\n    'toggleRightWindow',\n    'openRightWindow',\n    'closeRightWindow'];\n\n  } else {// use native drawer provided on Titanium SDK 6.2\n    methods = [\n    'replaceCenterView',\n    'toggleLeft',\n    'openLeft',\n    'closeLeft',\n    'toggleRight',\n    'openRight',\n    'closeRight'];\n\n  }\n}\n\n// exporse other methods\n_.each(methods, function (fn) {\n\n  if (!$[fn]) {\n\n    // we need wrapper function for Android\n    $[fn] = OS_IOS ? $.instance[fn] : function (a, b) {\n      return $.instance[fn](a, b);\n    };\n  }\n});\n\nfunction translateEvent(event) {\n\n  if (mod === 'dk.napp.drawer') {\n\n    if (event === 'draweropen') {\n      event = 'windowDidOpen';\n    }\n\n    if (event === 'drawerclose') {\n      event = 'windowDidClose';\n    }\n\n  } else {\n\n    if (event === 'windowDidOpen') {\n      event = 'draweropen';\n    }\n\n    if (event === 'windowDidClose') {\n      event = 'drawerclose';\n    }\n  }\n\n  return event;\n}"]}