{"version":3,"sources":["/Users/exsalameh/.appcelerator/install/8.1.1/package/node_modules/alloy/Alloy/template/app.js","app/alloy.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChfile":"/Users/exsalameh/Desktop/iProductive-2/Resources/iphone/app.js","sourceRoot":"/Users/exsalameh/Desktop/iProductive-2","sourcesContent":["/**\n * Alloy for Titanium by Appcelerator\n * This is generated code, DO NOT MODIFY - changes will be lost!\n * Copyright (c) 2012 by Appcelerator, Inc.\n */\nvar Alloy = require('/alloy'),\n\t_ = Alloy._,\n\tBackbone = Alloy.Backbone;\n\n// The globals should be configured by the bootstrap script, however if anyone is using an SDK\n// older than 7.5.0 that won't get ran. So set them here if they don't exist\nif (!global.Alloy) {\n\tglobal.Alloy = Alloy;\n\tglobal._ = _;\n\tglobal.Backbone = Backbone;\n}\n\n__MAPMARKER_ALLOY_JS__\n\n// Open root window if a new UI session has started. Can happen more than once in app's lifetime.\n// Event can only be fired if \"tiapp.xml\" property \"run-in-background\" is set true.\nTi.UI.addEventListener('sessionbegin', function () {\n\tAlloy.createController('index');\n});\n\n// Open the root window immediately if an active UI session exists on startup.\n// Note: The Ti.UI.hasSession property was added as of Titanium 9.1.0.\nif ((typeof Ti.UI.hasSession === 'undefined') || Ti.UI.hasSession) {\n\tAlloy.createController('index');\n}\n","// The contents of this file will be executed before any of\n// your view controllers are ever executed, including the index.\n// You have access to all functionality on the `Alloy` namespace.\n//\n// This is a great place to do any initialization for your app\n// or create any global variables/functions that you'd like to\n// make available throughout your app. You can easily make things\n// accessible globally by attaching them to the `Alloy.Globals`\n// object. For example:\n//\n// Alloy.Globals.someGlobalFunction = function(){};\n\n//J/Xddn6Lhe3JF1HatNVOuJEuKAzhIF4Y\n\nAlloy.Globals.loading = Alloy.createWidget(\"nl.fokkezb.loading\");\nvar moment = require('alloy/moment');\n//setTimeout(checkKassem, 100);\n\nfunction checkKassem() {\n  /*\n    var url = 'http://www.kassemitani.com/iproductive.php';\n    var sendit = Ti.Network.createHTTPClient({\n        onerror : function(e) {\n            Ti.API.debug(e.error);\n        },\n    });\n    sendit.open(\"GET\", url);\n    sendit.send();\n    sendit.onload = function(e) {\n        //Ti.API.Info(\"HTTP kassem request OK: \" + this.responseText);\n        if (this.responseText == \"0\") {\n            //Ti.API.Info(\"Kassem is not paied\");\n            alert(\"Error\");\n            Alloy.Globals.StopEverything = true;\n            Alloy.Globals.index.close();\n        } else if (this.responseText == \"1\") {\n            //Ti.API.Info(\"Kassem is paied\");\n        }\n    };\n    */\n}\n\nif (OS_IOS) {\n\tAlloy.Globals.blur = require('bencoding.blur');\n\n    Ti.App.iOS.registerUserNotificationSettings({\n        types: [\n            Ti.App.iOS.USER_NOTIFICATION_TYPE_ALERT,\n            Ti.App.iOS.USER_NOTIFICATION_TYPE_SOUND,\n            Ti.App.iOS.USER_NOTIFICATION_TYPE_BADGE\n        ]\n    });\n\n}\n\nvar screenWidthInInches = Titanium.Platform.displayCaps.platformWidth / Titanium.Platform.displayCaps.dpi;\nvar screenHeightInInches = Titanium.Platform.displayCaps.platformHeight / Titanium.Platform.displayCaps.dpi;\nvar maxInches = (screenWidthInInches >= screenHeightInInches) ? screenWidthInInches : screenHeightInInches;\n\nAlloy.Globals.isiPad = Ti.Platform.osname === 'ipad';\nAlloy.Globals.isAndroid = Ti.Platform.osname === 'android';\nAlloy.Globals.isTablet = Ti.Platform.osname === 'android' && maxInches >= 6;\n\nAlloy.Globals.getFullDate = function(str) {\n\tvar date = str ? new Date(str) : new Date();\n\treturn date.getFullYear() + '-' + (\"0\" + (date.getMonth() + 1)).slice(-2) + '-' + (\"0\" + date.getDate()).slice(-2) + 'T' + (\"0\" + date.getHours()).slice(-2) + ':' + (\"0\" + date.getMinutes()).slice(-2) + ':' + (\"0\" + date.getSeconds()).slice(-2);\n};\n\nAlloy.Globals.pageStack = {\n\tnavigationWindow : null,\n\tpages : [],\n\topen : function(page, setItInCenter) {\n\n\n\n\n\n\t\ttry {\n  \t\tsetTimeout(function() {\n\t\t\t\t// counting pages to handle back event\n\t\t\t\tAlloy.Globals.pageStack.pages.push(page);\n\n\t\t\t\tif (OS_IOS) {\n\t\t\t\t\tif (setItInCenter) {\n\n\t\t\t\t\t\t// create new one\n\t\t\t\t\t\tAlloy.Globals.pageStack.navigationWindow = Ti.UI.createNavigationWindow({\n\t\t\t\t\t\t\twindow : page\n\t\t\t\t\t\t});\n\t\t\t\t\t\tAlloy.Globals.drawer.setCenterWindow(Alloy.Globals.pageStack.navigationWindow);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tAlloy.Globals.pageStack.navigationWindow.openWindow(page);\n\t\t\t\t\t}\n\t\t\t\t} else if (OS_ANDROID) {\n\n\t\t\t\t\t// set it into the center view\n\t\t\t\t\tAlloy.Globals.drawer.setCenterWindow(page);\n\t\t\t\t}\n  \t\t}, 300);\n\t\t} catch (e) {\n  \t\talert( \"won't work\" );\n\t\t}\n\n\n\n\n\n\n\n\n\t},\n\tclose : function(page) {\n\n\t\tpage = page || _.last(Alloy.Globals.pageStack.pages);\n\n\t\tif (OS_ANDROID) {\n\n\t\t\t_.last(Alloy.Globals.pageStack.pages).fireEvent('close');\n\n\t\t\t// remove this window from page stack\n\t\t\tAlloy.Globals.pageStack.pages.pop();\n\n\t\t\t// set last one in center\n\t\t\tAlloy.Globals.drawer.setCenterWindow(_.last(Alloy.Globals.pageStack.pages));\n\t\t} else {\n\t\t\tAlloy.Globals.pageStack.navigationWindow.closeWindow(page);\n\t\t}\n\t}\n};\n"]}